### this section is a continuation on the file 15
### we will parse file from the filebeat and filter it throught the logstash pipeline 

root@elk:/etc/logstash/conf.d# pwd
/etc/logstash/conf.d
root@elk:/etc/logstash/conf.d# ls
filebeat.conf
root@elk:/etc/logstash/conf.d#

### we are going to create iis filter, iis is part of window machine but we are going to show an example on the linux machine 
### on filebeat server create a directory iis
root@elk:/var/log# ls
README            apport.log  bootstrap.log  cloud-init-output.log  dist-upgrade  elasticsearch  filebeat        hello.log  journal  my_data.log  test.log   unattended-upgrades
alternatives.log  apt         btmp           cloud-init.log         dpkg.log      faillog        fontconfig.log  installer  lastlog  private      test1.log  wtmp
root@elk:/var/log# mkdir iis
root@elk:/var/log#

root@elk:/var/log# vim iis.log
root@elk:/var/log#

### add the sample iis log in iis.log file through iis logs grok and disect.docx document:
https://github.com/mussawirimam/Elastic_SearchChintaman/blob/main/iis%20logs%20grok%20and%20disect.docx

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### we already have apache pattern in the logstash pipeline, now we are targeting the iis pattern logs to parse the data through filebeat to logstash
# using grok debugger
TOOL: https://grokdebugger.com

root@elk:/var/log# rm -rf hello.log
root@elk:/var/log#


### in IIS we have a sample data and its grok pattern:
GROK on grokdebugger.

### IIS SAMPLE DATA
2024-03-21 14:30:00 W3SVC1 192.168.1.1 GET /index.html - 80 - 192.168.1.100 Mozilla/5.0 200 0 0 15

### OUTPUT AFTER PARSING
[
  {
    "log_timestamp": "2024-03-21 14:30:00",
    "sitename": "W3SVC1",
    "server_ip": "192.168.1.1",
    "method": "GET",
    "uri": "/index.html",
    "query": "-",
    "port": 80,
    "username": "-",
    "client_ip": "192.168.1.100",
    "user_agent": "Mozilla/5.0",
    "response_code": 200,
    "sub_status": 0,
    "win32_status": 0,
    "time_taken": 15
  }
]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
So now we have two types logstash pipelines on logstash server and two types of files on filebeat server.
We will use the help of the tags in our logstash pipline to further help us differentiate the data identification and parse the data through the elasticsearch 
we will use tags and if statement


when there are two files which you are trying to parse through the logstash conf.d files aka pipeline, you would need to add the tags and if and else condition in the logstash file
and at the filebeat config file, you will have to add the unique id among all input for apache and iis

### we need two inputs at the filebeat level configuration. 


### the importance of the tags in filebeat.yml
so if you have a tag apache in the filebeat.yml file you can then speicify in the logstash pipeline conf.d to target it
also, 
Separation → If Filebeat is collecting from multiple sources (e.g., nginx, system, mysql), you can assign different tags so you know where the logs originated.
Dashboards → Kibana visualizations/dashboards often rely on tags to differentiate log types.



root@elk:/etc/logstash/conf.d# cat filebeat.conf
input {
  beats {
    port => 5044

  }
}

filter {
if "apache" in [tags]
{
grok {
match => {"message" => "%{IP:IP} - %{DATA:Name} \[%{HTTPDATE:timestamp}\] \"%{DATA:Request} %{DATA:Uri}HTTP/1.0\" %{NUMBER:Responce} %{NUMBER:Pid}" }
}
    mutate {
      add_field => { "log_type" => "apache_access" }
    }

    mutate {
      add_field => { "log_type" => "myapacheindex" }
    }

}
}

if "iis" in [tags]
{

grok {

match => {"message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{DATA:sitename} %{IP:server_ip} %{WORD:method} %{URIPATH:uri} %{NOTSPACE:query} %{NUMBER:port} %{NOTSPACE:username} %{IP:client_ip} %{NOTSPACE:user_agent} %{NUMBER:response_code} %{NUMBER:sub_status} %{NUMBER:win32_status} %{NUMBER:time_taken}" }

}
    mutate {
      add_field => { "log_type" => "iis" }
    }

    mutate {
      add_field => { "log_type" => "myiis" }
    }

}
}
output
{

stdout {
  codec => rubydebug
}

  elasticsearch {
    hosts => ["https://sys.fcc:9200"]
    index => "logs_for_test_%{+YYYY.MM.dd}"
    user => elastic
    password => blfOwgJUMUuLKjmXVYU2
    ssl => true
    cacert => "/etc/elasticsearch/certs/ca/ca.crt"
  }
}

root@elk:/etc/logstash/conf.d#
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CONCEPT OF ID AND TAG IN FILEBEAT AND LOGSTASH
-------------------------------------------------

root@elk:/etc/filebeat# cat filebeat.yml
###################### Filebeat Configuration Example #########################

# This file is an example configuration file highlighting only the most common
# options. The filebeat.reference.yml file from the same directory contains all the
# supported options with more comments. You can use it as a reference.
#
# You can find the full configuration reference here:
# https://www.elastic.co/guide/en/beats/filebeat/index.html

# For more available modules and options, please see the filebeat.reference.yml sample
# configuration file.

# ============================== Filebeat inputs ===============================

filebeat.inputs:

# Each - is an input. Most options can be set at the input level, so
# you can use different inputs for various configurations.
# Below are the input-specific configurations.

# filestream is an input for collecting log messages from files.
- type: filestream

  # Unique ID among all inputs, an ID is required.
  id: apache

  # Change to true to enable this input configuration.
  enabled: true

  # Paths that should be crawled and fetched. Glob based paths.
  paths:
    - /var/log/apache/*.log
    #- c:\programdata\elasticsearch\logs\*
  tags ["apache"]

    # Unique ID among all inputs, an ID is required.
  id: iis

  # Change to true to enable this input configuration.
  enabled: true

  # Paths that should be crawled and fetched. Glob based paths.
  paths:
    - /var/log/iis/*.log
    #- c:\programdata\elasticsearch\logs\*
  tags: ["iis"]

  # Exclude lines. A list of regular expressions to match. It drops the lines that are
  # matching any regular expression from the list.
  # Line filtering happens after the parsers pipeline. If you would like to filter lines
  # before parsers, use include_message parser.
  #exclude_lines: ['^DBG']

  # Include lines. A list of regular expressions to match. It exports the lines that are
  # matching any regular expression from the list.
  # Line filtering happens after the parsers pipeline. If you would like to filter lines
  # before parsers, use include_message parser.
  #include_lines: ['^ERR', '^WARN']

  # Exclude files. A list of regular expressions to match. Filebeat drops the files that
  # are matching any regular expression from the list. By default, no files are dropped.
  #prospector.scanner.exclude_files: ['.gz$']

  # Optional additional fields. These fields can be freely picked
  # to add additional information to the crawled log files for filtering
  #fields:
  #  level: debug
  #  review: 1

# journald is an input for collecting logs from Journald
#- type: journald

  # Unique ID among all inputs, if the ID changes, all entries
  # will be re-ingested
  #id: my-journald-id

  # The position to start reading from the journal, valid options are:
  #  - head: Starts reading at the beginning of the journal.
  #  - tail: Starts reading at the end of the journal.
  #    This means that no events will be sent until a new message is written.
  #  - since: Use also the `since` option to determine when to start reading from.
  #seek: head

  # A time offset from the current time to start reading from.
  # To use since, seek option must be set to since.
  #since: -24h

  # Collect events from the service and messages about the service,
  # including coredumps.
  #units:
    #- docker.service

# ============================== Filebeat modules ==============================

filebeat.config.modules:
  # Glob pattern for configuration loading
  path: ${path.config}/modules.d/*.yml

  # Set to true to enable config reloading
  reload.enabled: false

  # Period on which files under path should be checked for changes
  #reload.period: 10s

# ======================= Elasticsearch template setting =======================

setup.template.settings:
  index.number_of_shards: 1
  #index.codec: best_compression
  #_source.enabled: false


# ================================== General ===================================

# The name of the shipper that publishes the network data. It can be used to group
# all the transactions sent by a single shipper in the web interface.
#name:

# The tags of the shipper are included in their field with each
# transaction published.
#tags: ["service-X", "web-tier"]

# Optional fields that you can specify to add additional information to the
# output.
#fields:
#  env: staging

# ================================= Dashboards =================================
# These settings control loading the sample dashboards to the Kibana index. Loading
# the dashboards is disabled by default and can be enabled either by setting the
# options here or by using the `setup` command.
#setup.dashboards.enabled: false

# The URL from where to download the dashboard archive. By default, this URL
# has a value that is computed based on the Beat name and version. For released
# versions, this URL points to the dashboard archive on the artifacts.elastic.co
# website.
#setup.dashboards.url:

# =================================== Kibana ===================================

# Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
# This requires a Kibana endpoint configuration.
setup.kibana:

  # Kibana Host
  # Scheme and port can be left out and will be set to the default (http and 5601)
  # In case you specify and additional path, the scheme is required: http://localhost:5601/path
  # IPv6 addresses should always be defined as: https://[2001:db8::1]:5601
  #host: "localhost:5601"

  # Kibana Space ID
  # ID of the Kibana Space into which the dashboards should be loaded. By default,
  # the Default Space will be used.
  #space.id:

# =============================== Elastic Cloud ================================

# These settings simplify using Filebeat with the Elastic Cloud (https://cloud.elastic.co/).

# The cloud.id setting overwrites the `output.elasticsearch.hosts` and
# `setup.kibana.host` options.
# You can find the `cloud.id` in the Elastic Cloud web UI.
#cloud.id:

# The cloud.auth setting overwrites the `output.elasticsearch.username` and
# `output.elasticsearch.password` settings. The format is `<user>:<pass>`.
#cloud.auth:

# ================================== Outputs ===================================

# Configure what output to use when sending the data collected by the beat.

# ---------------------------- Elasticsearch Output ----------------------------
#output.elasticsearch:
  # Array of hosts to connect to.
  #  hosts: ["localhost:9200"]

  # Performance preset - one of "balanced", "throughput", "scale",
  # "latency", or "custom".
  # preset: balanced

  # Protocol - either `http` (default) or `https`.
  #protocol: "https"

  # Authentication credentials - either API key or username/password.
  #api_key: "id:api_key"
  #username: "elastic"
  #password: "changeme"

# ------------------------------ Logstash Output -------------------------------
output.logstash:
  # The Logstash hosts
  hosts: ["10.211.55.31:5044"]

  # Optional SSL. By default is off.
  # List of root certificates for HTTPS server verifications
  #ssl.certificate_authorities: ["/etc/pki/root/ca.pem"]

  # Certificate for SSL client authentication
  #ssl.certificate: "/etc/pki/client/cert.pem"

  # Client Certificate Key
  #ssl.key: "/etc/pki/client/cert.key"

# ================================= Processors =================================
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~

# ================================== Logging ===================================

# Sets log level. The default log level is info.
# Available log levels are: error, warning, info, debug
#logging.level: debug

# At debug level, you can selectively enable logging only for some components.
# To enable all selectors, use ["*"]. Examples of other selectors are "beat",
# "publisher", "service".
#logging.selectors: ["*"]

# ============================= X-Pack Monitoring ==============================
# Filebeat can export internal metrics to a central Elasticsearch monitoring
# cluster.  This requires xpack monitoring to be enabled in Elasticsearch.  The
# reporting is disabled by default.

# Set to true to enable the monitoring reporter.
#monitoring.enabled: false

# Sets the UUID of the Elasticsearch cluster under which monitoring data for this
# Filebeat instance will appear in the Stack Monitoring UI. If output.elasticsearch
# is enabled, the UUID is derived from the Elasticsearch cluster referenced by output.elasticsearch.
#monitoring.cluster_uuid:

# Uncomment to send the metrics to Elasticsearch. Most settings from the
# Elasticsearch outputs are accepted here as well.
# Note that the settings should point to your Elasticsearch *monitoring* cluster.
# Any setting that is not set is automatically inherited from the Elasticsearch
# output configuration, so if you have the Elasticsearch output configured such
# that it is pointing to your Elasticsearch monitoring cluster, you can simply
# uncomment the following line.
#monitoring.elasticsearch:

# ============================== Instrumentation ===============================

# Instrumentation support for the filebeat.
#instrumentation:
    # Set to true to enable instrumentation of filebeat.
    #enabled: false

    # Environment in which filebeat is running on (eg: staging, production, etc.)
    #environment: ""

    # APM Server hosts to report instrumentation results to.
    #hosts:
    #  - http://localhost:8200

    # API Key for the APM Server(s).
    # If api_key is set then secret_token will be ignored.
    #api_key:

    # Secret token for the APM Server(s).
    #secret_token:


# ================================= Migration ==================================

# This allows to enable 6.7 migration aliases
#migration.6_to_7.enabled: true

root@elk:/etc/filebeat#

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### we will now create the directory and files for the apache and iis to send out to logstash to be parsed with the grok pattern to be applied 
root@elk:/etc/filebeat# systemctl stop filebeat
root@elk:/etc/filebeat#

root@elk:/var/log# mkdir iis
mkdir: cannot create directory ‘iis’: File exists
root@elk:/var/log# mkdir apache
mkdir: cannot create directory ‘apache’: File exists
root@elk:/var/log#

root@elk:/var/log# cd apache/
root@elk:/var/log/apache# vim apache.log
127.0.0.1 - frank [10/Oct/2024:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326

:wq!

### we will add this grok pattern on logstash server inside confd file
filter {
  grok {
    match => { "message" => "%{IP:client_ip} - %{WORD:user} \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:bytes}" }
  }
  date {
    match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
}


root@elk:/var/log# cd iis
root@elk:/var/log/iis# vim iis.log
2024-03-21 14:30:00 W3SVC1 192.168.1.1 GET /index.html - 80 - 192.168.1.100 Mozilla/5.0 200 0 0 15

:wq!

### we will add this grok pattern on logstash server inside confd file
filter {
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{DATA:sitename} %{IP:server_ip} %{WORD:method} %{URIPATH:uri} %{NOTSPACE:query} %{NUMBER:port} %{NOTSPACE:username} %{IP:client_ip} %{NOTSPACE:user_agent} %{NUMBER:response_code} %{NUMBER:sub_status} %{NUMBER:win32_status} %{NUMBER:time_taken}" }
  }
  date {
    match => [ "log_timestamp", "YYYY-MM-dd HH:mm:ss" ]
  }
}
