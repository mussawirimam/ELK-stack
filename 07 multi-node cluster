we will create 3 elasticsearch and one kibana server
we will follow same steps for installation but we have to start the elasticsearch sequentially.
If you start 1st server needs to be the master and then following 2nd elasticsearch and 3rd elasticsearch node needs to be start via systemctl
To make less mistakes, try to install sequentially as well and save all of their passwords in one file
the configuration will be different from how you did configuration on the single node cluster. 
Environment: aws

on aws:
1. create 3 ec2 instance with default vpc
2. unders security group > in-bound > under type tab add 
Type		Protocol 		Port Range 		Source 		
Custom TCP		TCP		9300		CUSTOM		0.0.0.0/0
SSH		TCP		          22		CUSTOM		0.0.0.0/0
ALL ICMP IPV4	ICMP		ALL		CUSTOM		0.0.0.0/0
CUSTOM TCP		TCP		9200		CUSTOM		0.0.0.0/0
ALL TCP		    TCP		0-65535	CUSTOM		0.0.0.0/0


1. install elasticsearch on 3 nodes ( go to installation notes )
2. configure the elasticsearch.yml file with node-1, node-2, and node-3 : github https://github.com/mussawirimam/ELK-stack/tree/main/files/multi-cluster
3. create a ca, crt and key pem files   : https://github.com/mussawirimam/ELK-stack/blob/main/02%20Installation%20Steps%20n%20configuration%20n%20ssltls%20and%20restart
  a. copy same cert files to node 2 and 3 as well and change the node.name in elasticsearch.yml file: 
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node-1  <--------------------------- to node-2 and node-3 on each servers in elasticsearch.yml file
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
-----------------------------------------------------------------------------------------------------------------------
4. start the elasticsearch systemctl start elasticsearch sequentially, on node-1 first check the /var/log/elasticsearch/future.log
5. start node-2 and node-3 as well
6. curl 

------------------------------------------------
cd /usr/share/elasticsearch/bin/
./elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip
cd /etc/elasticsearch/certs
ls
cd ..
ll
chown -R elasticsearch:elasticsearch *
ll
chmod 755 *
ll

cd /usr/share/elasticsearch/bin/
cd /etc/elasticsearch/certs
unzip ca_elastic.zip

cd /usr/share/elasticsearch/bin/
./elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc --pem
cd /etc/elasticsearch/certs
unzip certificate.zip

cd elastic/
root@elk:/etc/elasticsearch/certs/elastic# ls
elastic.crt  elastic.key
root@elk:/etc/elasticsearch/certs/elastic# pwd
/etc/elasticsearch/certs/elastic
root@elk:/etc/elasticsearch/certs/elastic#

root@elk:/etc/elasticsearch# chown -R elasticsearch:elasticsearch *
chmod 755 *




root@elk:/etc/elasticsearch/certs/elastic# ls
elastic.crt  elastic.key
root@elk:/etc/elasticsearch/certs/elastic# pwd
/etc/elasticsearch/certs/elastic
root@elk:/etc/elasticsearch/certs/elastic#

/etc/elasticsearch/certs/elastic/elastic.crt
/etc/elasticsearch/certs/elastic/elastic.key

xpack.security.http.ssl:
  enabled: true
  key: /etc/elasticsearch/certs/elastic/elastic.key
  certificate: /etc/elasticsearch/certs/elastic/elastic.crt
  certificate_authorities: ["/etc/elasticsearch/certs/ca/ca.crt"]

# Enable encryption and mutual authentication between cluster nodes
xpack.security.transport.ssl:
  enabled: true
  verification_mode: certificate
  key: /etc/elasticsearch/certs/elastic/elastic.key
  certificate: /etc/elasticsearch/certs/elastic/elastic.crt
  certificate_authorities: ["/etc/elasticsearch/certs/ca/ca.crt"]

