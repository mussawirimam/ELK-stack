import subprocess

def run_command(command):
	result = subprocess.run(command, shell=True, text=True, capture_output=True)
	if result.returncode != 0:
		print(f"Error: {result.stderr}")
		exit(result.returncode)
	else:
		print(result.stdout)

run_command("sudo apt update")
run_command("sudo apt install -y openjdk-17-jdk")
run_command("sudo apt install -y apt-transport-https")
run_command("wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg")
run_command('echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list')
run_command("sudo apt update")
run_command("sudo apt install -y elasticsearch=8.14.1")

# I need to add missing steps above
# this script is still not yet perfected.
# I need to add the logic for console output to the output.txt 
#######################

ElasticSearch installation: 
https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html
Step 1: Update System Packages
Before installing, update your system packages:
sudo apt update && sudo apt upgrade -y
________________________________________
Step 2: Install Java (If Not Installed)
Elasticsearch requires Java. Install OpenJDK:
sudo apt install -y openjdk-17-jdk
Verify the installation:
java -version
________________________________________
Step 3: Add Elasticsearch Repository
1.	Download and install the GPG key:
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
2.	Add the Elasticsearch repository:
echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
3.	Update the package list:
sudo apt update
________________________________________
Step 4: Install Elasticsearch
sudo apt install -y elasticsearch
Note: password will be provided post installation copy that password for elastic super user
________________________________________
Step 5: Configure Elasticsearch
Edit the Elasticsearch configuration file:
sudo vim /etc/elasticsearch/elasticsearch.yml

network.host: 0.0.0.0  
cluster.name: my-cluster
node.name: node-1
cluster.initial_master_nodes: ["node-1"]
Save and exit (CTRL+X, then Y, then ENTER).

Before starting elastic search make sure you are giving correct permission

chown -R elasticsearch:elasticsearch /etc/default/elasticsearch
chown -R elasticsearch:elasticsearch /var/lib/elasticsearch
chown -R elasticsearch:elasticsearch /var/log/elasticsearch
chown -R elasticsearch:elasticsearch /etc/elasticsearch
chown -R elasticsearch:elasticsearch /etc/sysconfig/elasticsearch

chmod -R 775 /etc/default/elasticsearch
chmod -R 775 /var/lib/elasticsearch
chmod -R 775 /var/log/elasticsearch
chmod -R 775 /etc/elasticsearch
chmod -R 775 /etc/sysconfig/elasticsearch
________________________________________
Step 6: Start and Enable Elasticsearch
Start the Elasticsearch service:
sudo systemctl start elasticsearch
Enable it to start on boot:
sudo systemctl enable elasticsearch
Check if it’s running:
sudo systemctl status elasticsearch
________________________________________
Step 7: Test Elasticsearch
Run the following command:
curl -X GET https://localhost:9200 -k
You should see a response with Elasticsearch details.
________________________________________
Step 8: Secure Elasticsearch (Optional)
If you are using Elasticsearch 8.x, security is enabled by default. Run the following command to get auto-generated passwords:
sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
Use the generated password to log in or reset password.
________________________________________
Step 9: Open Ports (If Needed)
If accessing Elasticsearch remotely, allow traffic:
sudo ufw allow 9200/tcp


Self Sign Certificate Binding
To generate self sign certificate, we have to use elastic search utility 
/usr/share/elasticsearch/bin/elasticsearch-certutil 
Run below command to generate ca certificate
/usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip

go to /etc/elasticsearch/certs/
unzip  /etc/elasticsearch/certs/ca_elastic.zip

Give permission and ownership to this certificate

below command to generate certificate for elastic

/usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc -–pem

go to /etc/elasticsearch/certs/
unzip  /etc/elasticsearch/certs/ certificate.zip
Give permission and ownership with elasticsearch user and 775 permission
open vim /etc/elasticsearch/elsaticsearch.yml
and configure certificates path below

xpack.security.http.ssl:
  enabled: true
  key: /etc/elasticsearch/certs/elastic/elastic.key
  certificate: /etc/elasticsearch/certs/elastic/elastic.crt
  certificate_authorities: ["/etc/elasticsearch/certs/ca/ca.crt"]


Restart elastic search Before starting elastic search make sure you are giving correct permission

chown -R elasticsearch:elasticsearch /etc/default/elasticsearch
chown -R elasticsearch:elasticsearch /var/lib/elasticsearch
chown -R elasticsearch:elasticsearch /var/log/elasticsearch
chown -R elasticsearch:elasticsearch /etc/elasticsearch
chown -R elasticsearch:elasticsearch /etc/sysconfig/elasticsearch

chmod -R 775 /etc/default/elasticsearch
chmod -R 775 /var/lib/elasticsearch
chmod -R 775 /var/log/elasticsearch
chmod -R 775 /etc/elasticsearch
chmod -R 775 /etc/sysconfig/elasticsearch

Try to access elastic search make sure to do host entry

make sure to add local host entry
vim /etc/hosts
localhost sys.fcc
127.0.0.1 sys.fcc

in your pc also do host entry
localhost sys.fcc
127.0.0.1 sys.fcc
C:\Windows\System32\drivers\etc\hosts


-------------------------------------------------------------------------------------------------------------------------------
######################### installation on the box #########################
root@ubuntu-jammy:~# ls
snap
root@ubuntu-jammy:~# apt install -y openjdk-17-jdk
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:

root@ubuntu-jammy:~# wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg

root@ubuntu-jammy:~# echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main
root@ubuntu-jammy:~# apt update
Hit:1 http://archive.ubuntu.com/ubuntu jammy InRelease
Get:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]

root@ubuntu-jammy:~# apt install -y elasticsearch=8.14.1
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following NEW packages will be installed:
  elasticsearch
0 upgraded, 1 newly installed, 0 to remove and 1 not upgraded.
Need to get 589 MB of archives.
After this operation, 1149 MB of additional disk space will be used.
Get:1 https://artifacts.elastic.co/packages/8.x/apt stable/main amd64 elasticsearch amd64 8.14.1 [589 MB]
Fetched 589 MB in 23s (26.0 MB/s)
Selecting previously unselected package elasticsearch.
(Reading database ... 110131 files and directories currently installed.)
Preparing to unpack .../elasticsearch_8.14.1_amd64.deb ...
Creating elasticsearch group... OK
Creating elasticsearch user... OK
Unpacking elasticsearch (8.14.1) ...
Setting up elasticsearch (8.14.1) ...
...

Warning: The unit file, source configuration file or drop-ins of systemd-sysctl.service changed on disk. Run 'systemctl daemon-reload' to reload units.
--------------------------- Security autoconfiguration information ------------------------------

Authentication and authorization are enabled.
TLS for the transport and HTTP layers is enabled and configured.			### by default it configured the tls and http, you will see below how it got generated.

The generated password for the elastic built-in superuser is : H-u87nwujeL3=ubnALjf          <---------------------------------------------------------------- you will get the password here, username: elastic 

If this node should join an existing cluster, you can reconfigure this with
'/usr/share/elasticsearch/bin/elasticsearch-reconfigure-node --enrollment-token <token-here>'
after creating an enrollment token on your existing cluster.

You can complete the following actions at any time:

Reset the password of the elastic built-in superuser with
'/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic'.                    <---------------------------------------------------------------- to reset your password 

Generate an enrollment token for Kibana instances with
 '/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana'.

Generate an enrollment token for Elasticsearch nodes with
'/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node'.
-------------------------------------------------------------------------------------------------
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service
Scanning processes...
Scanning linux images...

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
root@ubuntu-jammy:~# 

----------------------------------------------------------------------------------------------------




################################################## CONFIGURIATION SETTING UP A SINGLE NODE CLUSTER ELK ##################################################
### we are going to setup the Elk on a single machine/stand alone cluster
### 9200 is a application layer for kibana
### 9300 is a transport layer for data exchange
### h.w certification and tls

######### CONFIGURING STAND ALONE ELK #########
### configuration location of elasticsearch: /etc/elasticsearch
root@ubuntu-jammy:~# cd /etc/elasticsearch
root@kibana:/etc/elasticsearch# ls
certs                   elasticsearch-plugins.example.yml  jvm.options    log4j2.properties  roles.yml  users_roles
elasticsearch.keystore  elasticsearch.yml                  jvm.options.d  role_mapping.yml   users
root@kibana:/etc/elasticsearch#

### all of the files above are used by elasticsearch but we will interact with elasticsearch.yml, log4j2.properties, and certs for now. 
### open elasticsearch file and we will uncomment some of the commented section in order to configure our elasticsearch

root@ubuntu-jammy:/etc/elasticsearch# vi elasticsearch.yml
### below I have uncommented configuration parameters or uncommenting configuration lines. When you will freshly install the elasticsearch, those will be commented and will have default parameters and values.
# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: my_elk	<---------- my cluster name that I have defined. For now we are installing only single elk (single machine as stand-alone cluster)
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node-1            <------------------------ used at elasticsearch level
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /var/lib/elasticsearch	<-----------------------
#
# Path to log files:
#
path.logs: /var/log/elasticsearch 	<-----------------------
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# By default Elasticsearch is only accessible on localhost. Set a different
# address here to expose this node on the network:
#
#network.host: 192.168.0.1
#
# By default Elasticsearch listens for HTTP traffic on the first free port it
# finds starting at 9200. Set a specific HTTP port here:
#
http.port: 9200		<-----------------------
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when this node is started:
# The default list of hosts is ["127.0.0.1", "[::1]"]
#
#discovery.seed_hosts: ["host1", "host2"]
#
# Bootstrap the cluster using an initial set of master-eligible nodes:
#
cluster.initial_master_nodes: ["node-1"]	<--------------- # this has to match the initial master node that you have uncommented above
#
# For more information, consult the discovery and cluster formation module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Allow wildcard deletion of indices:
#
#action.destructive_requires_name: false

#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------
#
# The following settings, TLS certificates, and keys have been automatically
# generated to configure Elasticsearch security features on 22-02-2025 17:18:48
#
# --------------------------------------------------------------------------------
### THIS SECTION IS ALSO VERY IMPORTANT WHEN SETTING UP THE CERTIFICATES ###
# Enable security features
xpack.security.enabled: true	#<-----------------

xpack.security.enrollment.enabled: true		#<-----------------
### WE WILL ADD SELF SIGNED CERTIFICATES LATER 
# Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents
xpack.security.http.ssl:	#<----------------- http ssl you see the certifcate is enabled with the self signed certificated
  enabled: true
  keystore.path: certs/http.p12		#<---------------- which is stored in this keystore path. So certificates are stored within the keystore. Q: what is keystore? A: instead of plain text, the keys for the cluster will be encrypted (we can change/override the store key as well). Keystore is like an encryption atm. Q: why is it needed? for id, password, or critical system config etc to be encrypted.

# Enable encryption and mutual authentication between cluster nodes
### in older version of elasticsearch, the security features werent enabled by default but latest version will be configured with the self signed certificates.
xpack.security.transport.ssl:		#<----------- transport ssl # elasticsearch work on two ports localhost:9200 http agent end user kibana etc and 9300 transport. For internal there will be different certificate and for the external it will have the different certiciates. # 9300 is used for transport layer (data exchange/communication) and 9200 is used for the application layer
  enabled: true		#<-----------------
  verification_mode: certificate	#<-----------------
  keystore.path: certs/transport.p12	#<-----------------
  truststore.path: certs/transport.p12		#<------------ truststore is the CA (certificate authority) who generate the certificate, who can recognize the certificates. 
# Create a new cluster with the current node only
# Additional nodes can still join the cluster later
#cluster.initial_master_nodes: ["ubuntu-jammy"]		#<-------------- we will comment this because, we have uncommented the cluster master node name above 

# Allow HTTP API connections from anywhere
# Connections are encrypted and require user authentication
http.host: 0.0.0.0	#<-------------- localhost ip

# Allow other nodes to join the cluster from anywhere
# Connections are encrypted and mutually authenticated
#transport.host: 0.0.0.0

#----------------------- END SECURITY AUTO CONFIGURATION -------------------------
:wq!   

root@ubuntu-jammy:/etc/elasticsearch#
root@ubuntu-jammy:/etc/elasticsearch#

### side note
keystore is the encrypted keys for that reason we need the keystore.path and if we dont want to use the default key, we can add the new key value in keystore.path
analogy: keystore.path is like a encryption atm
my certifcates are stored within the keystore. 

9300 is on which the elasticsearch communicate internally (transport port/transport setting)
9200 is on which the elasticsearch communicated externally (http agent end user kibana etc)
### we are using the self-signed certificates in this case that comes be default. 

################# STARTING ELASTIC SEARCH ####################

### make sure to know which version of elasticserach you have installed and keep a copy of the password that it provides you in the begining.
### we should note the version of the elasticsearch we have installed so that we can install the same version of kibana as well. 
### we will start elasticsearch:
### it will take time, because elasticsearch is setting up all the things and is getting bootstrap with the configuration that we have provided within the elasticsearch.yml file and if we made any mistakes while providing the parameters within the elasticsearch.yml file, it should throw errors on console.

root@ubuntu-jammy:/etc/elasticsearch# systemctl start elasticsearch
root@ubuntu-jammy:/etc/elasticsearch# systemctl status elasticsearch
● elasticsearch.service - Elasticsearch
     Loaded: loaded (/lib/systemd/system/elasticsearch.service; disabled; vendor preset: enabled)
     Active: active (running) since Sat 2025-02-22 18:27:01 UTC; 1min 31s ago
       Docs: https://www.elastic.co
   Main PID: 4951 (java)

### to verify if the port is active: this mean that the elasticsearch is connected
### when we do the telnet on localhost 9200, it means that the port was open locally.

root@ubuntu-jammy:/etc/elasticsearch# telnet localhost 9200
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Connection closed by foreign host.
root@ubuntu-jammy:/etc/elasticsearch#

### ifconfig to get the nic ip 
root@kibana:/etc/elasticsearch# ifconfig
ens33: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.xxx.xxx.xxx  netmask 255.xxx.xxx.xxx  broadcast 192.xxx.xxx.xxx
or 
you can use the localhost
### we are using the self signed certificate authority in order to get the access of it. 
### https is mandatory
=== on browser ===
https://192.xxx.xxx.xxx:9200/
# username: elastic		#<------------------ our superuser will be elastic, so put the username: elastic
# password: is mentioned above at the time of installation #<----------- very important you should have saved the password at the time of installation.
{
  "name" : "node-1",
  "cluster_name" : "my_elk",
  "cluster_uuid" : "aeKN9TcSSRW5CiIJb9Bh5A",
  "version" : {
    "number" : "8.14.1",
    "build_flavor" : "default",
    "build_type" : "deb",
    "build_hash" : "93a57a1a76f556d8aee6a90d1a95b06187501310",
    "build_date" : "2024-06-10T23:35:17.114581191Z",
    "build_snapshot" : false,
    "lucene_version" : "9.10.0",
    "minimum_wire_compatibility_version" : "7.17.0",
    "minimum_index_compatibility_version" : "7.0.0"
  },
  "tagline" : "You Know, for Search"
}

############# INTERACTING WITH BASIC API's ##############
### our elasticsearch is running but if it is running healthy or not that is something we have to check through writing the api 
### api's will provide response in the json format
API:

https://localhost:9200

### put this in the url for the access of other apis
# with the api below, you will be able to get more api
### this api below will show other api's that we can use:
https://192.168.1.232:9200/_cat

=^.^=
/_cat/allocation
/_cat/shards
/_cat/shards/{index}
/_cat/master
/_cat/nodes
/_cat/tasks
/_cat/indices
/_cat/indices/{index}
/_cat/segments
/_cat/segments/{index}
/_cat/count
/_cat/count/{index}
/_cat/recovery
/_cat/recovery/{index}
/_cat/health
/_cat/pending_tasks
/_cat/aliases
/_cat/aliases/{alias}
/_cat/thread_pool
/_cat/thread_pool/{thread_pools}
/_cat/plugins
/_cat/fielddata
/_cat/fielddata/{fields}
/_cat/nodeattrs
/_cat/repositories
/_cat/snapshots/{repository}
/_cat/templates
/_cat/component_templates/_cat/ml/anomaly_detectors
/_cat/ml/anomaly_detectors/{job_id}
/_cat/ml/datafeeds
/_cat/ml/datafeeds/{datafeed_id}
/_cat/ml/trained_models
/_cat/ml/trained_models/{model_id}
/_cat/ml/data_frame/analytics
/_cat/ml/data_frame/analytics/{id}
/_cat/transforms
/_cat/transforms/{transform_id}

### alternatively you can use the api through curl in your Cli as well:
-k flag is for insecure certificate since it is internal certificate
root@kibana:/etc/elasticsearch# curl -u elastic:password https://192.168.29.137:9200/_cat -k
=^.^=
/_cat/allocation
/_cat/shards
/_cat/shards/{index}
/_cat/master
/_cat/nodes
...

### to check the master node 
# this information is coming from the database
https://192.168.1.232:9200/_cat/master

https://192.168.1.232:9200/_cat/indices:
# right now we done have any indices in the cluster

https://192.168.1.232:9200/_cat/health:
1740264701 22:51:41 my_elk green 1 1 1 1 0 0 0 0 - 100.0%

# we will com across the GET/PUT/POST/DELETE api commands as well. 
# 

### because of internal certificate, I am not able to get the response from the server itself. 
root@ubuntu-jammy:/etc/elasticsearch# curl -u elastic:H-u87nwujeL3=ubnALjf https://10.0.2.15:9200/_cat/health
curl: (60) SSL certificate problem: self-signed certificate in certificate chain
More details here: https://curl.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
root@ubuntu-jammy:/etc/elasticsearch#

### you have to mention the -k flag. Because, as you go through on the browser and click on the advance option insecure. On linux system it is doing the same thing. (Proceed insecure) because it is trying to uderstand the certificate. We have used the internal certificate not the public certificate. 
root@ubuntu-jammy:/etc/elasticsearch# curl -u elastic:H-u87nwujeL3=ubnALjf https://10.0.2.15:9200/_cat/health -k
1740505081 17:38:01 my_elk green 1 1 1 1 0 0 0 0 - 100.0%



---------------------------------------------------------------------
########################### SSL CERTIFICATE ###########################

#IMPORTANT### Demo only (since we dont have public authority): we are using the ssl so incase organization you work for dont want to use the localhost but use a public ssl certifcate. Note: We dont have the public certificate but below we are going through how we will generate the ssl certificates is only for demonstration purpose:
### we dont have public certificate but we will try to setup certificate in the similar way.

### important note:
# /usr/share/elasticsearch/bin # this directory is very useful, it stores all the elasticsearch related binaries.
# elasticsearch is an executable binary for running the database.???

root@ubuntu-jammy:/etc/elasticsearch# cd /usr/share/elasticsearch/bin
root@ubuntu-jammy:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-env            elasticsearch-reconfigure-node  elasticsearch-sql-cli
elasticsearch-certgen                  elasticsearch-env-from-file  elasticsearch-reset-password    elasticsearch-sql-cli-8.14.1.jar
elasticsearch-certutil                 elasticsearch-geoip          elasticsearch-saml-metadata     elasticsearch-syskeygen
elasticsearch-cli                      elasticsearch-keystore       elasticsearch-service-tokens    elasticsearch-users
elasticsearch-create-enrollment-token  elasticsearch-node           elasticsearch-setup-passwords   systemd-entrypoint
elasticsearch-croneval                 elasticsearch-plugin         elasticsearch-shard
root@ubuntu-jammy:/usr/share/elasticsearch/bin#

==== DEMO BEGINS ===
### Let's create a certificate with the elasticsearch cert utility command:
# what this command is doing is saying: hey ealsticsearch-certutil generate a ca (signing authority). Trough which will be able to generate certificate. And, Generate it in a pem format. Previously we say we saw p12 which was the encrypted form. Now we are generating the pem format (key format), which is the general format. And, we are --out it into the zip, write the ca in the zip format because there will be mutlipe files.
/usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip


root@ubuntu-jammy:/usr/share/elasticsearch/bin# /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'ca' mode generates a new 'certificate authority'
This will create a new X.509 certificate and private key that can be used
to sign certificate when running in 'cert' mode.

Use the 'ca-dn' option if you wish to configure the 'distinguished name'
of the certificate authority

By default the 'ca' mode produces a single PKCS#12 output file which holds:
    * The CA certificate
    * The CA's private key

If you elect to generate PEM format certificates (the -pem option), then the output will
be a zip file containing individual files for the CA certificate and private key
root@ubuntu-jammy:/usr/share/elasticsearch/bin#
----------------------------------------

root@ubuntu-jammy:/usr/share/elasticsearch/bin# cd /etc/elasticsearch/certs/
root@ubuntu-jammy:/etc/elasticsearch/certs# ls
ca_elastic.zip  http.p12  http_ca.crt  transport.p12
root@ubuntu-jammy:/etc/elasticsearch/certs#

### I have to unzip it now. ###
root@ubuntu-jammy:/etc/elasticsearch/certs# unzip ca_elastic.zip
Archive:  ca_elastic.zip
   creating: ca/
  inflating: ca/ca.crt
  inflating: ca/ca.key
root@ubuntu-jammy:/etc/elasticsearch/certs#

### I got my ca (certificate authority)
root@ubuntu-jammy:/etc/elasticsearch/certs# ls
ca  ca_elastic.zip  http.p12  http_ca.crt  transport.p12
root@ubuntu-jammy:/etc/elasticsearch/certs#

### in this ca directory we will get the certificate authority and a key
# in this ca directory we will get our certificate and key
# this certificate and key is signing authority certificated key, not our certificate which we want to use.

root@ubuntu-jammy:/etc/elasticsearch/certs# cd ca
root@ubuntu-jammy:/etc/elasticsearch/certs/ca# ls
ca.crt  ca.key
root@ubuntu-jammy:/etc/elasticsearch/certs/ca#

### now we have to generate ca, certificated key and now we have to generate our certifcate and key from this ca certificated key.
### what this command is saying: hey elasticsearch certificate utility generate certificate, earlier we generated ca which is signing authority. Now we are generating certificate. 
/usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc -–pem

### go to the elasticsearch binary directory, then run the command from above:
root@ubuntu-jammy:/etc/elasticsearch/certs/ca# cd /usr/share/elasticsearch/bin/
root@ubuntu-jammy:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-env            elasticsearch-reconfigure-node  elasticsearch-sql-cli
elasticsearch-certgen                  elasticsearch-env-from-file  elasticsearch-reset-password    elasticsearch-sql-cli-8.14.1.jar
elasticsearch-certutil                 elasticsearch-geoip          elasticsearch-saml-metadata     elasticsearch-syskeygen
elasticsearch-cli                      elasticsearch-keystore       elasticsearch-service-tokens    elasticsearch-users
elasticsearch-create-enrollment-token  elasticsearch-node           elasticsearch-setup-passwords   systemd-entrypoint
elasticsearch-croneval                 elasticsearch-plugin         elasticsearch-shard
root@ubuntu-jammy:/usr/share/elasticsearch/bin# /usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc --pem

This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'cert' mode generates X.509 certificate and private keys.
    * By default, this generates a single certificate and key for use
       on a single instance.
    * The '-multiple' option will prompt you to enter details for multiple
       instances and will generate a certificate and key for each one
    * The '-in' option allows for the certificate generation to be automated by describing
       the details of each instance in a YAML file

    * An instance is any piece of the Elastic Stack that requires an SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.


    * All certificates generated by this tool will be signed by a certificate authority (CA)
      unless the --self-signed command line option is specified.
      The tool can automatically generate a new CA for you, or you can provide your own with
      the --ca or --ca-cert command line options.


By default the 'cert' mode produces a single PKCS#12 output file which holds:
    * The instance certificate
    * The private key for the instance certificate
    * The CA certificate

If you specify any of the following options:
    * -pem (PEM formatted output)
    * -multiple (generate multiple certificates)
    * -in (generate certificates from an input file)
then the output will be be a zip file containing individual certificate/key files

Enter password for certificate.zip :	# it shouldnt ask this prompt (I have fixed the issue) ignore this
Enter password for certificate.zip :	# it shouldnt ask this prompt (I have fixed the issue) ignore this

Certificates written to /etc/elasticsearch/certs/certificate.zip

This file should be properly secured as it contains the private key for		#<------------------------ gives you details
your instance.
This file is a self contained file and can be copied and used 'as is'
For each Elastic product that you wish to configure, you should copy
this '.p12' file to the relevant configuration directory
and then follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and	#<------------- client meaning this is where our browser was getting error, my browser was not able to trust the certificates because the certificates are self signed not public certificates. So when we proceeded wtih caution what we did was to just proceed without the trust.
configure the client to trust this certificate.

root@kibana:/usr/share/elasticsearch/bin# cd -
/etc/elasticsearch/certs
root@kibana:/etc/elasticsearch/certs# ls
ca  ca_elastic.zip  certificate.zip  http_ca.crt  http.p12  transport.p12
root@kibana:/etc/elasticsearch/certs#

root@kibana:/etc/elasticsearch/certs# unzip certificate.zip
Archive:  certificate.zip
   creating: elastic/
  inflating: elastic/elastic.crt
  inflating: elastic/elastic.key
root@kibana:/etc/elasticsearch/certs# ls
ca  ca_elastic.zip  certificate.zip  elastic  http_ca.crt  http.p12  transport.p12
root@kibana:/etc/elasticsearch/certs#
root@kibana:/etc/elasticsearch/certs# cd elastic/
root@kibana:/etc/elasticsearch/certs/elastic# ls
elastic.crt  elastic.key
root@kibana:/etc/elasticsearch
### in your organization, they will provide the certificates above.  
### whomever is doing the ssl certificate processes, they will provide you the certificates with domain name. In our case domain is: sys.fcc

root@kibana:/etc/elasticsearch/certs/elastic# cd ..
root@kibana:/etc/elasticsearch/certs# ls
ca  ca_elastic.zip  certificate.zip  elastic  http_ca.crt  http.p12  transport.p12
root@kibana:/etc/elasticsearch/certs# cd ..
root@kibana:/etc/elasticsearch# ls
certs                   elasticsearch-plugins.example.yml  jvm.options    log4j2.properties  roles.yml  users_roles
elasticsearch.keystore  elasticsearch.yml                  jvm.options.d  role_mapping.yml   users
root@kibana:/etc/elasticsearch#

### PERMISSIONS AND OWNERSHIP FOR ELASTICSEARCH USER TO ACCESS THE ELASTICSEARCH RELATED DIRECTORIES AND FILES ###
# we need to take care of the permission, all the files that we are writing should have elasticsearch user permission.
root@kibana:/etc/elasticsearch# ll
total 84
drwxr-s---   4 root elasticsearch  4096 Mar 25 22:49 ./
drwxr-xr-x 142 root root          12288 Mar 24 23:32 ../
drwxr-x---   4 root elasticsearch  4096 Mar 25 23:41 certs/
-rw-rw----   1 root elasticsearch   536 Mar 24 23:09 elasticsearch.keystore
-rw-rw----   1 root elasticsearch  1042 Jun 10  2024 elasticsearch-plugins.example.yml
-rw-rw----   1 root elasticsearch  4030 Mar 25 22:25 elasticsearch.yml
-rw-r-----   1 root elasticsearch 16384 Mar 24 23:41 .elasticsearch.yml.swp
-rw-rw----   1 root elasticsearch  2781 Jun 10  2024 jvm.options
drwxr-s---   2 root elasticsearch  4096 Jun 10  2024 jvm.options.d/
-rw-rw----   1 root elasticsearch 17969 Jun 10  2024 log4j2.properties
-rw-rw----   1 root elasticsearch   473 Jun 10  2024 role_mapping.yml
-rw-rw----   1 root elasticsearch   197 Jun 10  2024 roles.yml
-rw-rw----   1 root elasticsearch     0 Jun 10  2024 users
-rw-rw----   1 root elasticsearch     0 Jun 10  2024 users_roles
root@kibana:/etc/elasticsearch#


root@kibana:/etc/elasticsearch# cd certs/
root@kibana:/etc/elasticsearch/certs# ll
total 48
drwxr-x--- 4 root elasticsearch  4096 Mar 25 23:41 ./
drwxr-s--- 4 root elasticsearch  4096 Mar 25 22:49 ../
drwxr-xr-x 2 root root           4096 Mar 25 23:15 ca/
-rw------- 1 root root           2522 Mar 25 23:15 ca_elastic.zip
-rw------- 1 root root           2579 Mar 25 23:41 certificate.zip
drwxr-xr-x 2 root root           4096 Mar 25 23:41 elastic/		<----------------- provide the permission change from root to elasticsearch user permission. Elasticsearch will not be able to access this directory if we dont provide correct permissions.
-rw-rw---- 1 root elasticsearch  1915 Mar 24 23:09 http_ca.crt
-rw-rw---- 1 root elasticsearch 10029 Mar 24 23:09 http.p12
-rw-rw---- 1 root elasticsearch  5822 Mar 24 23:09 transport.p12
root@kibana:/etc/elasticsearch/certs#

root@kibana:/etc/elasticsearch/certs# chown -R elasticsearch:elasticsearch /etc/elasticsearch
root@kibana:/etc/elasticsearch/certs# ll
total 48
drwxr-x--- 4 elasticsearch elasticsearch  4096 Mar 25 23:41 ./
drwxr-s--- 4 elasticsearch elasticsearch  4096 Mar 25 22:49 ../
drwxr-xr-x 2 elasticsearch elasticsearch  4096 Mar 25 23:15 ca/
-rw------- 1 elasticsearch elasticsearch  2522 Mar 25 23:15 ca_elastic.zip
-rw------- 1 elasticsearch elasticsearch  2579 Mar 25 23:41 certificate.zip
drwxr-xr-x 2 elasticsearch elasticsearch  4096 Mar 25 23:41 elastic/
-rw-rw---- 1 elasticsearch elasticsearch  1915 Mar 24 23:09 http_ca.crt
-rw-rw---- 1 elasticsearch elasticsearch 10029 Mar 24 23:09 http.p12
-rw-rw---- 1 elasticsearch elasticsearch  5822 Mar 24 23:09 transport.p12
root@kibana:/etc/elasticsearch/certs#

root@kibana:/etc/elasticsearch/certs# chmod -R 775 /etc/elasticsearch
root@kibana:/etc/elasticsearch/certs# ll
total 48
drwxrwxr-x 4 elasticsearch elasticsearch  4096 Mar 25 23:41 ./
drwxrwsr-x 4 elasticsearch elasticsearch  4096 Mar 25 22:49 ../
drwxrwxr-x 2 elasticsearch elasticsearch  4096 Mar 25 23:15 ca/
-rwxrwxr-x 1 elasticsearch elasticsearch  2522 Mar 25 23:15 ca_elastic.zip*
-rwxrwxr-x 1 elasticsearch elasticsearch  2579 Mar 25 23:41 certificate.zip*
drwxrwxr-x 2 elasticsearch elasticsearch  4096 Mar 25 23:41 elastic/
-rwxrwxr-x 1 elasticsearch elasticsearch  1915 Mar 24 23:09 http_ca.crt*
-rwxrwxr-x 1 elasticsearch elasticsearch 10029 Mar 24 23:09 http.p12*
-rwxrwxr-x 1 elasticsearch elasticsearch  5822 Mar 24 23:09 transport.p12*
root@kibana:/etc/elasticsearch/certs#


------------------------------------------------------------------------------------------------------------------------------------

################# TO CONFIGURE THE CERTIFICATES IN ELASTICSEARCH #############
"""
IMPORTANT:
official document: https://www.elastic.co/blog/configuring-ssl-tls-and-https-to-secure-elasticsearch-kibana-beats-and-logstash
previously we were running the elasticsearch with the certificates that elasticsearch came with: http.p12, http_ca.crt, and transport.p12...
Now we will add our own self-signed certificates in the elasticsearch.yml file
"""
### we are going to expose http endpoint outside, the endpoint will be used by the end-users so it needs to be secured
### NOTE: elk master node election process
# QORUM METHOD: https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-quorums.html


https://www.elastic.co/blog/configuring-ssl-tls-and-https-to-secure-elasticsearch-kibana-beats-and-logstash
# for now we are just going to follow the steps below, not from the official docuementation. 

### we are going to expose the end-point for outside, because it will be used by end users.
### https://192.xxx.xxx.xxx:9200/ this end point needs to be secure
### to secure the end-point we will have to utilize the settings


### we added lines in the elasticsearch.yml file for certificates
root@kibana:/etc/elasticsearch/certs# cat /etc/elasticsearch/elasticsearch.yml
# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: my_elk
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node-1
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /var/lib/elasticsearch
#
# Path to log files:
#
path.logs: /var/log/elasticsearch
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# By default Elasticsearch is only accessible on localhost. Set a different
# address here to expose this node on the network:
#
#network.host: 192.168.0.1
#
# By default Elasticsearch listens for HTTP traffic on the first free port it
# finds starting at 9200. Set a specific HTTP port here:
#
http.port: 9200
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when this node is started:
# The default list of hosts is ["127.0.0.1", "[::1]"]
#
#discovery.seed_hosts: ["host1", "host2"]
#
# Bootstrap the cluster using an initial set of master-eligible nodes:
#
cluster.initial_master_nodes: ["node-1"]
#
# For more information, consult the discovery and cluster formation module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Allow wildcard deletion of indices:
#
#action.destructive_requires_name: false

#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------
#
# The following settings, TLS certificates, and keys have been automatically
# generated to configure Elasticsearch security features on 25-03-2025 03:08:49
#
# --------------------------------------------------------------------------------

# Enable security features
xpack.security.enabled: true

xpack.security.enrollment.enabled: true

# Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents
xpack.security.http.ssl:
  enabled: true
  key: /etc/elasticsearch/certs/elastic/elastic.key			#<------------------------- we added this line to provide the key		# KEY file which will be verified by the certificate authority verifierbelow
  certificate: /etc/elasticsearch/certs/elastic/elastic.crt		#<------------------------- we added this line to provide the elastic.crt # CERTIFICATE file which will be verified by the certificate authority verifier below
  certificate_authorities: ["/etc/elasticsearch/certs/ca/ca.crt"]	#<------------------------- we added this line to provide the ca.crt # CERTIFICATE AUTHORITY: verifier

# Enable encryption and mutual authentication between cluster nodes
xpack.security.transport.ssl:
  enabled: true
  verification_mode: certificate
  keystore.path: certs/transport.p12
  truststore.path: certs/transport.p12
# Create a new cluster with the current node only
# Additional nodes can still join the cluster later
#cluster.initial_master_nodes: ["kibana"]

# Allow HTTP API connections from anywhere
# Connections are encrypted and require user authentication
http.host: 0.0.0.0

# Allow other nodes to join the cluster from anywhere
# Connections are encrypted and mutually authenticated
#transport.host: 0.0.0.0

#----------------------- END SECURITY AUTO CONFIGURATION -------------------------
root@kibana:/etc/elasticsearch/certs#

""" 
we have implemeted the certificate configuration within the elasticsearch.yml file. 
Now we will restart the elasticsearch to implement the certificates
then we will access our elasticsearch with the sys.fcc domain name
"""
############## DEMO ENDS #################


### Q: why would you delete this folder? dont do it but just for sake of question?
Q: sudo rm -rf /var/lib/elasticsearch/*
📁 What is /var/lib/ in Linux?
/var/lib/ is a standard directory in Linux used to store persistent application data — the kind that changes as programs run.

It's like the "workspace" for services that need to keep track of state, databases, user sessions, etc.

📦 So what's /var/lib/elasticsearch/?
For Elasticsearch, this directory stores the entire node's data, including:

Subdirectory / File	What's in it
nodes/	Node ID, cluster state, shard data
indices/	All the actual index data (your documents, mappings, etc.)
translog/	Transaction logs (used for recovery in case of crash)
state-*.st	Metadata about cluster state, node state
Think of it as Elasticsearch’s memory, database, and journal all rolled into one.

🔄 Why is it important?
Elasticsearch won’t work without this directory.

If it's corrupted or doesn’t match your config (like different node name or discovery setup), Elasticsearch might fail to start or try to connect to ghost nodes (like what you're seeing).

If you delete it, you wipe all data, and Elasticsearch will create a new clean state.

✅ Summary
Directory	Purpose
/var/lib/elasticsearch/	Where Elasticsearch stores all of its persistent data — indices, cluster state, etc.
Should I delete it?	Only if you’re okay losing all data and starting fresh (e.g., during dev or reset)
Can I move or back it up?	Yes — you can archive it or point path.data to another location in elasticsearch.yml


### curl needs -u username and -k,--insecure flag 
root@matrix:/var/lib# curl -u elastic -X GET https://localhost:9200/ -k
Enter host password for user 'elastic':
{
  "name" : "node-1",
  "cluster_name" : "my_elk",
  "cluster_uuid" : "XEUfksbvSYq7c0NYj7EEKQ",
  "version" : {
    "number" : "8.14.1",
    "build_flavor" : "default",
    "build_type" : "deb",
    "build_hash" : "93a57a1a76f556d8aee6a90d1a95b06187501310",
    "build_date" : "2024-06-10T23:35:17.114581191Z",
    "build_snapshot" : false,
    "lucene_version" : "9.10.0",
    "minimum_wire_compatibility_version" : "7.17.0",
    "minimum_index_compatibility_version" : "7.0.0"
  },
  "tagline" : "You Know, for Search"
}
root@matrix:/var/lib#
