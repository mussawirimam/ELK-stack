What keystore is?
keystore is kind of encrypted safe, where we can store our keys.
Which we cannot directly into the elasticsearch configuration file. How we configure
those files, here in our keystore. We will understand that and how we access those files.

root@matrix:/etc/elasticsearch# systemctl stop elasticsearch
root@matrix:/etc/elasticsearch# systemctl status elasticsearch.service
â—‹ elasticsearch.service - Elasticsearch
     Loaded: loaded (/lib/systemd/system/elasticsearch.service; enabled; vendor preset: enabled)
     Active: inactive (dead) since Fri 20



# from previous notes, we generated one key. If you want we can generate another key. 
#./elasticsearch-service-tokens create elastic/kibana kibana_token

root@matrix:/usr/share/elasticsearch/bin# cd /usr/share/elasticsearch/bin
root@matrix:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-geoip             elasticsearch-setup-passwords
elasticsearch-certgen                  elasticsearch-keystore          elasticsearch-shard
elasticsearch-certutil                 elasticsearch-node              elasticsearch-sql-cli
elasticsearch-cli                      elasticsearch-plugin            elasticsearch-sql-cli-8.14.1.jar
elasticsearch-create-enrollment-token  elasticsearch-reconfigure-node  elasticsearch-syskeygen
elasticsearch-croneval                 elasticsearch-reset-password    elasticsearch-users
elasticsearch-env                      elasticsearch-saml-metadata     systemd-entrypoint
elasticsearch-env-from-file            elasticsearch-service-tokens
root@matrix:/usr/share/elasticsearch/bin#

### we are going to run this command to generate the service token key
# this command says: Hey elasticsearch service token, create elastic user kibana and folder kibana 
./elasticsearch-service-tokens create elastic users folder /kibana name of the token =  kibana_token

# we got error because the token already exists.
root@matrix:/usr/share/elasticsearch/bin# ./elasticsearch-service-tokens create elastic/kibana kibana_token
ERROR: Service token [elastic/kibana/kibana_token] already exists, with exit code 70
root@matrix:/usr/share/elasticsearch/bin# 

### we can choose another name and the new service token key will be created. 
### we can use this token to authenticate elasticsearch user
root@matrix:/usr/share/elasticsearch/bin# ./elasticsearch-service-tokens create elastic/kibana kibana_token1
SERVICE_TOKEN elastic/kibana/kibana_token1 = AAEAAWVsYXN0aWMva2liYW5hL2tpYmFuYV90b2tlbjE6eW5tRVVVSnZRUHlQTjZNRElNbjZNUQ
root@matrix:/usr/share/elasticsearch/bin#

# if we will configure id and password in plain text in any config file, suppose 

root@matrix:/usr/share/elasticsearch/bin# cd /etc/kibana/
root@matrix:/etc/kibana# ls
certs  kibana.keystore  kibana.yml  node.options
root@matrix:/etc/kibana#

### let's suppose
### this is the configuration file of kibana kibana.yml, where we configured our elasticsearch username and password in plaintext.
If anyone has the access to the server, they will be able to get away with the admin password.
if suppose if the server access is with 5 people but the administrator doesnt want to spread the super-user credentails with the junior members.
But they have access to the server for other reason or maybe they want to do different task on a server, in that case how to secure your ELk? 
or maybe the server is accessible someone else, in that case also they will be able to read the credential that has been placed in plain text. 
we can configure the credentials in a keystore.
Now we are going to learn about how to configure the token.

### suppose, I removed the credentials from the kibana.yml file. I will have to configure the token in that case. 
### this concept is similar to creating the personal access token on the github to get the access to your repository through API's on your CLI.
vi /etc/kibana/kibana.yml
# =================== System: Elasticsearch ===================
# The URLs of the Elasticsearch instances to use for all your queries.
#elasticsearch.hosts: ["http://localhost:9200"]
elasticsearch.hosts: ["https://sys.fcc:9200"]
#elasticsearch.hosts: ["https://172.17.154.9:9200"]

# If your Elasticsearch is protected with basic authentication, these settings provide
# the username and password that the Kibana server uses to perform maintenance on the Kibana
# index at startup. Your Kibana users still need to authenticate with Elasticsearch, which
# is proxied through the Kibana server.
#elasticsearch.username: "kibana_system"
#elasticsearch.password: "123456789"

# Kibana can also authenticate to Elasticsearch via "service account tokens".                                     # Service account tokens are Bearer style tokens that replace the traditional username/password based configuration.
# Use this token instead of a username/password.
 elasticsearch.serviceAccountToken: "AAEAAWVsYXN0aWMva2liYW5hL2tpYmFuYV90b2tlbjE6eW5tRVVVSnZRUHlQTjZNRElNbjZNUQ"
                                                                                                                  # Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of
                                                  
### we can configure credentials in a keystore in that case.
