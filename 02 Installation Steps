import subprocess

def run_command(command):
	result = subprocess.run(command, shell=True, text=True, capture_output=True)
	if result.returncode != 0:
		print(f"Error: {result.stderr}")
		exit(result.returncode)
	else:
		print(result.stdout)

run_command("sudo apt update")
run_command("sudo apt install -y openjdk-17-jdk")
run_command("sudo apt install -y apt-transport-https")
run_command("wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg")
run_command('echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list')
run_command("sudo apt update")
run_command("sudo apt install -y elasticsearch=8.14.1")

# I need to add missing steps above
# this script is still not yet perfected.
# I need to add the logic for console output to the output.txt 
#######################

ElasticSearch installation: 
https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html
Step 1: Update System Packages
Before installing, update your system packages:
sudo apt update && sudo apt upgrade -y
________________________________________
Step 2: Install Java (If Not Installed)
Elasticsearch requires Java. Install OpenJDK:
sudo apt install -y openjdk-17-jdk
Verify the installation:
java -version
________________________________________
Step 3: Add Elasticsearch Repository
1.	Download and install the GPG key:
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
2.	Add the Elasticsearch repository:
echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
3.	Update the package list:
sudo apt update
________________________________________
Step 4: Install Elasticsearch
sudo apt install -y elasticsearch
Note: password will be provided post installation copy that password for elastic super user
________________________________________
Step 5: Configure Elasticsearch
Edit the Elasticsearch configuration file:
sudo vim /etc/elasticsearch/elasticsearch.yml

network.host: 0.0.0.0  
cluster.name: my-cluster
node.name: node-1
cluster.initial_master_nodes: ["node-1"]
Save and exit (CTRL+X, then Y, then ENTER).

Before starting elastic search make sure you are giving correct permission

chown -R elasticsearch:elasticsearch /etc/default/elasticsearch
chown -R elasticsearch:elasticsearch /var/lib/elasticsearch
chown -R elasticsearch:elasticsearch /var/log/elasticsearch
chown -R elasticsearch:elasticsearch /etc/elasticsearch
chown -R elasticsearch:elasticsearch /etc/sysconfig/elasticsearch

chmod -R 775 /etc/default/elasticsearch
chmod -R 775 /var/lib/elasticsearch
chmod -R 775 /var/log/elasticsearch
chmod -R 775 /etc/elasticsearch
chmod -R 775 /etc/sysconfig/elasticsearch
________________________________________
Step 6: Start and Enable Elasticsearch
Start the Elasticsearch service:
sudo systemctl start elasticsearch
Enable it to start on boot:
sudo systemctl enable elasticsearch
Check if it’s running:
sudo systemctl status elasticsearch
________________________________________
Step 7: Test Elasticsearch
Run the following command:
curl -X GET https://localhost:9200 -k
You should see a response with Elasticsearch details.
________________________________________
Step 8: Secure Elasticsearch (Optional)
If you are using Elasticsearch 8.x, security is enabled by default. Run the following command to get auto-generated passwords:
sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
Use the generated password to log in or reset password.
________________________________________
Step 9: Open Ports (If Needed)
If accessing Elasticsearch remotely, allow traffic:
sudo ufw allow 9200/tcp


Self Sign Certificate Binding
To generate self sign certificate, we have to use elastic search utility 
/usr/share/elasticsearch/bin/elasticsearch-certutil 
Run below command to generate ca certificate
/usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip

go to /etc/elasticsearch/certs/
unzip  /etc/elasticsearch/certs/ca_elastic.zip

Give permission and ownership to this certificate

below command to generate certificate for elastic

/usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc –pem

go to /etc/elasticsearch/certs/
unzip  /etc/elasticsearch/certs/ certificate.zip
Give permission and ownership with elasticsearch user and 775 permission
open vim /etc/elasticsearch/elsaticsearch.yml
and configure certificates path below

xpack.security.http.ssl:
  enabled: true
  key: /etc/elasticsearch/certs/elastic/elastic.key
  certificate: /etc/elasticsearch/certs/elastic/elastic.crt
  certificate_authorities: ["/etc/elasticsearch/certs/ca/ca.crt"]


Restart elastic search Before starting elastic search make sure you are giving correct permission

chown -R elasticsearch:elasticsearch /etc/default/elasticsearch
chown -R elasticsearch:elasticsearch /var/lib/elasticsearch
chown -R elasticsearch:elasticsearch /var/log/elasticsearch
chown -R elasticsearch:elasticsearch /etc/elasticsearch
chown -R elasticsearch:elasticsearch /etc/sysconfig/elasticsearch

chmod -R 775 /etc/default/elasticsearch
chmod -R 775 /var/lib/elasticsearch
chmod -R 775 /var/log/elasticsearch
chmod -R 775 /etc/elasticsearch
chmod -R 775 /etc/sysconfig/elasticsearch

Try to access elastic search make sure to do host entry

make sure to add local host entry
vim /etc/hosts
localhost sys.fcc
127.0.0.1 sys.fcc

in your pc also do host entry
localhost sys.fcc
127.0.0.1 sys.fcc
C:\Windows\System32\drivers\etc\hosts


-------------------------------------------------------------------------------------------------------------------------------
######################### installation on the box #########################
root@ubuntu-jammy:~# ls
snap
root@ubuntu-jammy:~# apt install -y openjdk-17-jdk
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:

root@ubuntu-jammy:~# wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg

root@ubuntu-jammy:~# echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main
root@ubuntu-jammy:~# apt update
Hit:1 http://archive.ubuntu.com/ubuntu jammy InRelease
Get:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]

root@ubuntu-jammy:~# apt install -y elasticsearch=8.14.1
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following NEW packages will be installed:
  elasticsearch
0 upgraded, 1 newly installed, 0 to remove and 1 not upgraded.
Need to get 589 MB of archives.
After this operation, 1149 MB of additional disk space will be used.
Get:1 https://artifacts.elastic.co/packages/8.x/apt stable/main amd64 elasticsearch amd64 8.14.1 [589 MB]
Fetched 589 MB in 23s (26.0 MB/s)
Selecting previously unselected package elasticsearch.
(Reading database ... 110131 files and directories currently installed.)
Preparing to unpack .../elasticsearch_8.14.1_amd64.deb ...
Creating elasticsearch group... OK
Creating elasticsearch user... OK
Unpacking elasticsearch (8.14.1) ...
Setting up elasticsearch (8.14.1) ...
...

Warning: The unit file, source configuration file or drop-ins of systemd-sysctl.service changed on disk. Run 'systemctl daemon-reload' to reload units.
--------------------------- Security autoconfiguration information ------------------------------

Authentication and authorization are enabled.
TLS for the transport and HTTP layers is enabled and configured.			### by default it configured the tls and http, you will see below how it got generated.

The generated password for the elastic built-in superuser is : H-u87nwujeL3=ubnALjf          <---------------------------------------------------------------- you will get the password here, username: elastic 

If this node should join an existing cluster, you can reconfigure this with
'/usr/share/elasticsearch/bin/elasticsearch-reconfigure-node --enrollment-token <token-here>'
after creating an enrollment token on your existing cluster.

You can complete the following actions at any time:

Reset the password of the elastic built-in superuser with
'/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic'.                    <---------------------------------------------------------------- to reset your password 

Generate an enrollment token for Kibana instances with
 '/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana'.

Generate an enrollment token for Elasticsearch nodes with
'/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node'.
-------------------------------------------------------------------------------------------------
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service
Scanning processes...
Scanning linux images...

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
root@ubuntu-jammy:~# 

----------------------------------------------------------------------------------------------------




################################################## SETTING UP A SINGLE NODE CLUSTER ELK ##################################################
### we are going to setup the Elk on a single machine/stand alone cluster

######### CONFIGURING STAND ALONE ELK #########
### configuration location of elasticsearch: /etc/elasticsearch
root@ubuntu-jammy:~# cd /etc/elasticsearch
root@kibana:/etc/elasticsearch# ls
certs                   elasticsearch-plugins.example.yml  jvm.options    log4j2.properties  roles.yml  users_roles
elasticsearch.keystore  elasticsearch.yml                  jvm.options.d  role_mapping.yml   users
root@kibana:/etc/elasticsearch#

### all of the files above are used by elasticsearch but we will interact with elasticsearch.yml, log4j2.properties, and certs for now. 
### open elasticsearch file and we will uncomment some of the commented section in order to configure our elasticsearch

root@ubuntu-jammy:/etc/elasticsearch# vi elasticsearch.yml
### below I have uncommented configuration parameters or uncommenting configuration lines. When you will freshly install the elasticsearch, those will be commented and will have default parameters and values.
# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please consult the documentation for further information on configuration options:
# https://www.elastic.co/guide/en/elasticsearch/reference/index.html
#
# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: my_elk	<---------- my cluster name that I have defined. For now we are installing only single elk (single machine as stand-alone cluster)
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node-1            <------------------------ used at elasticsearch level
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /var/lib/elasticsearch
#
# Path to log files:
#
path.logs: /var/log/elasticsearch
#
# ----------------------------------- Memory -----------------------------------
#
# Lock the memory on startup:
#
#bootstrap.memory_lock: true
#
# Make sure that the heap size is set to about half the memory available
# on the system and that the owner of the process is allowed to use this
# limit.
#
# Elasticsearch performs poorly when the system is swapping the memory.
#
# ---------------------------------- Network -----------------------------------
#
# By default Elasticsearch is only accessible on localhost. Set a different
# address here to expose this node on the network:
#
#network.host: 192.168.0.1
#
# By default Elasticsearch listens for HTTP traffic on the first free port it
# finds starting at 9200. Set a specific HTTP port here:
#
http.port: 9200
#
# For more information, consult the network module documentation.
#
# --------------------------------- Discovery ----------------------------------
#
# Pass an initial list of hosts to perform discovery when this node is started:
# The default list of hosts is ["127.0.0.1", "[::1]"]
#
#discovery.seed_hosts: ["host1", "host2"]
#
# Bootstrap the cluster using an initial set of master-eligible nodes:
#
cluster.initial_master_nodes: ["node-1"]
#
# For more information, consult the discovery and cluster formation module documentation.
#
# ---------------------------------- Various -----------------------------------
#
# Allow wildcard deletion of indices:
#
#action.destructive_requires_name: false

#----------------------- BEGIN SECURITY AUTO CONFIGURATION -----------------------
#
# The following settings, TLS certificates, and keys have been automatically
# generated to configure Elasticsearch security features on 22-02-2025 17:18:48
#
# --------------------------------------------------------------------------------

# Enable security features
xpack.security.enabled: true

xpack.security.enrollment.enabled: true

# Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents
xpack.security.http.ssl:
  enabled: true
  keystore.path: certs/http.p12

# Enable encryption and mutual authentication between cluster nodes
xpack.security.transport.ssl:
  enabled: true
  verification_mode: certificate
  keystore.path: certs/transport.p12
  truststore.path: certs/transport.p12
# Create a new cluster with the current node only
# Additional nodes can still join the cluster later
#cluster.initial_master_nodes: ["ubuntu-jammy"]

# Allow HTTP API connections from anywhere
# Connections are encrypted and require user authentication
http.host: 0.0.0.0

# Allow other nodes to join the cluster from anywhere
# Connections are encrypted and mutually authenticated
#transport.host: 0.0.0.0

#----------------------- END SECURITY AUTO CONFIGURATION -------------------------
root@ubuntu-jammy:/etc/elasticsearch#
root@ubuntu-jammy:/etc/elasticsearch#

### side note
keystore is the encrypted keys for that reason we need the keystore.path and if we dont want to use the default key, we can add the new key value in keystore.path
analogy: keystore.path is like a encryption atm
my certifcates are stored within the keystore. 

9300 is on which the elasticsearch communicate internally (transport port/transport setting)
9200 is on which the elasticsearch communicated externally (http agent end user kibana etc)
### we are using the self-signed certificates in this case that comes be default. 


### make sure to know which version of elasticserach you have installed and keep a copy of the password that it provides you in the begining.
### we will start elasticsearch

root@ubuntu-jammy:/etc/elasticsearch# systemctl start elasticsearch
root@ubuntu-jammy:/etc/elasticsearch# systemctl status elasticsearch
● elasticsearch.service - Elasticsearch
     Loaded: loaded (/lib/systemd/system/elasticsearch.service; disabled; vendor preset: enabled)
     Active: active (running) since Sat 2025-02-22 18:27:01 UTC; 1min 31s ago
       Docs: https://www.elastic.co
   Main PID: 4951 (java)

# this mean that the elasticsearch is connected 
root@ubuntu-jammy:/etc/elasticsearch# telnet localhost 9200
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
Connection closed by foreign host.
root@ubuntu-jammy:/etc/elasticsearch#

### we are using the self signed certificate authority in order to get the access of it. 
=== on browser ===
https://192.168.1.232:9200/
# username: elastic
# password: is mentioned above at the time of installation
{
  "name" : "node-1",
  "cluster_name" : "my_elk",
  "cluster_uuid" : "aeKN9TcSSRW5CiIJb9Bh5A",
  "version" : {
    "number" : "8.14.1",
    "build_flavor" : "default",
    "build_type" : "deb",
    "build_hash" : "93a57a1a76f556d8aee6a90d1a95b06187501310",
    "build_date" : "2024-06-10T23:35:17.114581191Z",
    "build_snapshot" : false,
    "lucene_version" : "9.10.0",
    "minimum_wire_compatibility_version" : "7.17.0",
    "minimum_index_compatibility_version" : "7.0.0"
  },
  "tagline" : "You Know, for Search"
}

### our elasticsearch is running but if it is running healthy or not that is something we have to check through writing the api 
API:

https://localhost:9200

### put this in the url for the access of other apis
# with the api below, you will be able to get more api
https://192.168.1.232:9200/_cat

=^.^=
/_cat/allocation
/_cat/shards
/_cat/shards/{index}
/_cat/master
/_cat/nodes
/_cat/tasks
/_cat/indices
/_cat/indices/{index}
/_cat/segments
/_cat/segments/{index}
/_cat/count
/_cat/count/{index}
/_cat/recovery
/_cat/recovery/{index}
/_cat/health
/_cat/pending_tasks
/_cat/aliases
/_cat/aliases/{alias}
/_cat/thread_pool
/_cat/thread_pool/{thread_pools}
/_cat/plugins
/_cat/fielddata
/_cat/fielddata/{fields}
/_cat/nodeattrs
/_cat/repositories
/_cat/snapshots/{repository}
/_cat/templates
/_cat/component_templates/_cat/ml/anomaly_detectors
/_cat/ml/anomaly_detectors/{job_id}
/_cat/ml/datafeeds
/_cat/ml/datafeeds/{datafeed_id}
/_cat/ml/trained_models
/_cat/ml/trained_models/{model_id}
/_cat/ml/data_frame/analytics
/_cat/ml/data_frame/analytics/{id}
/_cat/transforms
/_cat/transforms/{transform_id}

### to check the master node 
# this information is coming from the database
https://192.168.1.232:9200/_cat/master

https://192.168.1.232:9200/_cat/indices:
# right now we done have any indices in the cluster

https://192.168.1.232:9200/_cat/health:
1740264701 22:51:41 my_elk green 1 1 1 1 0 0 0 0 - 100.0%

# we see the get commands, we will see the put, post, delete api commands as well. 
#

### because of internal certificate, I am not able to get the response from the server itself. 
root@ubuntu-jammy:/etc/elasticsearch# curl -u elastic:H-u87nwujeL3=ubnALjf https://10.0.2.15:9200/_cat/health
curl: (60) SSL certificate problem: self-signed certificate in certificate chain
More details here: https://curl.se/docs/sslcerts.html

curl failed to verify the legitimacy of the server and therefore could not
establish a secure connection to it. To learn more about this situation and
how to fix it, please visit the web page mentioned above.
root@ubuntu-jammy:/etc/elasticsearch#

### you have to mention the -k flag. Because, as you go through on the browser and click on the advance option insecure. On linux system it is doing the same thing. (Proceed insecure) because it is trying to uderstand the certificate. We have used the internal certificate not the public certificate. 
root@ubuntu-jammy:/etc/elasticsearch# curl -u elastic:H-u87nwujeL3=ubnALjf https://10.0.2.15:9200/_cat/health -k
1740505081 17:38:01 my_elk green 1 1 1 1 0 0 0 0 - 100.0%



---------------------------------------------------------------------
########################### SSL CERTIFICATE ###########################
### we dont have public certificate but we will try to setup certificate in the similar way.

### important note:
# elasticsearch is an executable binary for running the database.
# this file path uses the executables binaries.
root@ubuntu-jammy:/etc/elasticsearch# cd /usr/share/elasticsearch/bin
root@ubuntu-jammy:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-env            elasticsearch-reconfigure-node  elasticsearch-sql-cli
elasticsearch-certgen                  elasticsearch-env-from-file  elasticsearch-reset-password    elasticsearch-sql-cli-8.14.1.jar
elasticsearch-certutil                 elasticsearch-geoip          elasticsearch-saml-metadata     elasticsearch-syskeygen
elasticsearch-cli                      elasticsearch-keystore       elasticsearch-service-tokens    elasticsearch-users
elasticsearch-create-enrollment-token  elasticsearch-node           elasticsearch-setup-passwords   systemd-entrypoint
elasticsearch-croneval                 elasticsearch-plugin         elasticsearch-shard
root@ubuntu-jammy:/usr/share/elasticsearch/bin#

### Let's create a certificate with the certutility command:
# what this command is doing is saying: hey certutil generate a ca (signing authority). Trough which will be able to generate certificate. Generate it in a pem form. Previously we say we saw p12 which was the encrypted form. Now we are generating the pem form, which is the general format. And, we are --out it into the zip
/usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip


root@ubuntu-jammy:/usr/share/elasticsearch/bin# /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/elasticsearch/certs/ca_elastic.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'ca' mode generates a new 'certificate authority'
This will create a new X.509 certificate and private key that can be used
to sign certificate when running in 'cert' mode.

Use the 'ca-dn' option if you wish to configure the 'distinguished name'
of the certificate authority

By default the 'ca' mode produces a single PKCS#12 output file which holds:
    * The CA certificate
    * The CA's private key

If you elect to generate PEM format certificates (the -pem option), then the output will
be a zip file containing individual files for the CA certificate and private key

root@ubuntu-jammy:/usr/share/elasticsearch/bin#

root@ubuntu-jammy:/usr/share/elasticsearch/bin# cd /etc/elasticsearch/certs/
root@ubuntu-jammy:/etc/elasticsearch/certs# ls
ca_elastic.zip  http.p12  http_ca.crt  transport.p12
root@ubuntu-jammy:/etc/elasticsearch/certs#

### I have to unzip it now. 
root@ubuntu-jammy:/etc/elasticsearch/certs# unzip ca_elastic.zip
Archive:  ca_elastic.zip
   creating: ca/
  inflating: ca/ca.crt
  inflating: ca/ca.key
root@ubuntu-jammy:/etc/elasticsearch/certs#

### I got my ca (certificate authority)
root@ubuntu-jammy:/etc/elasticsearch/certs# ls
ca  ca_elastic.zip  http.p12  http_ca.crt  transport.p12
root@ubuntu-jammy:/etc/elasticsearch/certs#

### in this ca directory we will get the certificate authority and a key
# this certificate and key is signing authority certificated key, not our certificate which we want to use
root@ubuntu-jammy:/etc/elasticsearch/certs# cd ca
root@ubuntu-jammy:/etc/elasticsearch/certs/ca# ls
ca.crt  ca.key
root@ubuntu-jammy:/etc/elasticsearch/certs/ca#

### now we have to generate certificate and key from the ca certificated key
### hey elasticsearch certificate utility generate certificate, earlier we generated ca which is signing authority. Now we are generating certificate. 
/usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc –pem

root@ubuntu-jammy:/etc/elasticsearch/certs/ca# cd /usr/share/elasticsearch/bin/
root@ubuntu-jammy:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-env            elasticsearch-reconfigure-node  elasticsearch-sql-cli
elasticsearch-certgen                  elasticsearch-env-from-file  elasticsearch-reset-password    elasticsearch-sql-cli-8.14.1.jar
elasticsearch-certutil                 elasticsearch-geoip          elasticsearch-saml-metadata     elasticsearch-syskeygen
elasticsearch-cli                      elasticsearch-keystore       elasticsearch-service-tokens    elasticsearch-users
elasticsearch-create-enrollment-token  elasticsearch-node           elasticsearch-setup-passwords   systemd-entrypoint
elasticsearch-croneval                 elasticsearch-plugin         elasticsearch-shard
root@ubuntu-jammy:/usr/share/elasticsearch/bin# /usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/elasticsearch/certs/certificate.zip --name elastic --ca-cert /etc/elasticsearch/certs/ca/ca.crt --ca-key /etc/elasticsearch/certs/ca/ca.key --dns sys.fcc –pem
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'cert' mode generates X.509 certificate and private keys.
    * By default, this generates a single certificate and key for use
       on a single instance.
    * The '-multiple' option will prompt you to enter details for multiple
       instances and will generate a certificate and key for each one
    * The '-in' option allows for the certificate generation to be automated by describing
       the details of each instance in a YAML file

    * An instance is any piece of the Elastic Stack that requires an SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.


    * All certificates generated by this tool will be signed by a certificate authority (CA)
      unless the --self-signed command line option is specified.
      The tool can automatically generate a new CA for you, or you can provide your own with
      the --ca or --ca-cert command line options.


By default the 'cert' mode produces a single PKCS#12 output file which holds:
    * The instance certificate
    * The private key for the instance certificate
    * The CA certificate

If you specify any of the following options:
    * -pem (PEM formatted output)
    * -multiple (generate multiple certificates)
    * -in (generate certificates from an input file)
then the output will be be a zip file containing individual certificate/key files

Enter password for certificate.zip :
Enter password for certificate.zip :

Certificates written to /etc/elasticsearch/certs/certificate.zip

This file should be properly secured as it contains the private key for
your instance.
This file is a self contained file and can be copied and used 'as is'
For each Elastic product that you wish to configure, you should copy
this '.p12' file to the relevant configuration directory
and then follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.

