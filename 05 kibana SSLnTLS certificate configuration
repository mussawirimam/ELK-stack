### official documentation for setting up the ssl
https://www.elastic.co/blog/configuring-ssl-tls-and-https-to-secure-elasticsearch-kibana-beats-and-logstash
### continuing on kibana: how ssl gets created and we assign it to the elastic and those configuration to kibana
### and generating ssl for kibana. Right now we dont have domain name for the kibana, because we dont have the certificate for this particular kibana service, and that is why we are using kibana on http.
# side note: first spin up elasticsearch, and then kibana. 

#first step is to generate ca, then you generate certificates using ca
# we learned the connection of elasticsearch to the kibana and the ssl binding to the kibana reaching to the elasticsearch self signed certificate and we are doing the practice stand alone cluster; not with multipe elasticsearch. 
# how ssl gets created and how we assign it to the elastic.
# we are going to add domain name and configure the certificates with kibana. 

###################### KIBANA SSL/TLS CERTIFICATE GENERATION AND CONFIGURATION ######################
# when we install kibana, we get binaries with the kibana as well
root@kibana:~# cd /usr/share/kibana/bin/
root@kibana:/usr/share/kibana/bin# ls
kibana  kibana-encryption-keys  kibana-health-gateway  kibana-keystore  kibana-plugin  kibana-setup  kibana-verification-code
root@kibana:/usr/share/kibana/bin#

### we will go with the elasticsearch bin to generate the certificates and keys
root@kibana:/usr/share/kibana/bin# cd /usr/share/elasticsearch/bin/
root@kibana:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-env            elasticsearch-reconfigure-node  elasticsearch-sql-cli
elasticsearch-certgen                  elasticsearch-env-from-file  elasticsearch-reset-password    elasticsearch-sql-cli-8.14.1.jar
elasticsearch-certutil                 elasticsearch-geoip          elasticsearch-saml-metadata     elasticsearch-syskeygen
elasticsearch-cli                      elasticsearch-keystore       elasticsearch-service-tokens    elasticsearch-users
elasticsearch-create-enrollment-token  elasticsearch-node           elasticsearch-setup-passwords   systemd-entrypoint
elasticsearch-croneval                 elasticsearch-plugin         elasticsearch-shard
root@kibana:/usr/share/elasticsearch/bin#

root@matrix:/usr/share/elasticsearch/bin# ls /etc/kibana/certs/
ca  elastic
root@matrix:/usr/share/elasticsearch/bin#

### we will use the same commands as to how we created certificate and key for the elasticsearch and we will modify the command to use it with kibana
# if the kibana directory is not there then we have to create it
# /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/kibana/certs/kibana/ca_kibana.zip

root@kibana:/usr/share/elasticsearch/bin# ls /etc/kibana/certs/
ca  elastic
root@kibana:/usr/share/elasticsearch/bin#
root@kibana:/etc/kibana/certs# cd /etc/kibana/certs/
root@kibana:/etc/kibana/certs# mkdir kibana
root@kibana:/etc/kibana/certs# ls
ca  elastic  kibana
root@kibana:/etc/kibana/certs#

=== generating ca certificates ===
### we will create our ca using the elasticsearch-certutil
root@kibana:/usr/share/elasticsearch/bin# /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/kibana/certs/kibana/ca_kibana.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'ca' mode generates a new 'certificate authority'
This will create a new X.509 certificate and private key that can be used
to sign certificate when running in 'cert' mode.

Use the 'ca-dn' option if you wish to configure the 'distinguished name'
of the certificate authority

By default the 'ca' mode produces a single PKCS#12 output file which holds:
    * The CA certificate
    * The CA's private key

If you elect to generate PEM format certificates (the -pem option), then the output will
be a zip file containing individual files for the CA certificate and private key

root@kibana:/usr/share/elasticsearch/bin#

root@kibana:/usr/share/elasticsearch/bin# cd /etc/kibana/certs/kibana/
root@kibana:/etc/kibana/certs/kibana# ls
ca_kibana.zip
root@kibana:/etc/kibana/certs/kibana#

### unzip the ca_kibana to get the ca
root@kibana:/etc/kibana/certs/kibana# unzip ca_kibana.zip
Archive:  ca_kibana.zip
   creating: ca/
  inflating: ca/ca.crt
  inflating: ca/ca.key
root@kibana:/etc/kibana/certs/kibana# ls
ca  ca_kibana.zip
root@kibana:/etc/kibana/certs/kibana#

root@kibana:/etc/kibana/certs/kibana# ls ca
ca.crt  ca.key
root@kibana:/etc/kibana/certs/kibana#

=== generating ca.crt and ca.key to create our certificates  ===
### and we will require the ca.crt and ca.key to generate our certificates using our ca
# to generate certificate and we provided the path and name of the certificate
### change the name to kibana ### small mistake I made   <------------------------------------------------------
#/usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/kibana/certs/kibana/certificate.zip --name elastic --ca-cert /etc/kibana/certs/kibana/ca/ca.crt --ca-key /etc/kibana/certs/kibana/ca/ca.key --dns kibana.com â€“-pem

### I made a mistake here, instead of elastic --name should be kibana but I have changed the name of the file in below section but you can directly just change the --name kibana instead of elastic
root@kibana:/etc/kibana/certs/kibana# /usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/kibana/certs/kibana/certificate.zip --name elastic --ca-cert /etc/kibana/certs/kibana/ca/ca.crt --ca-key /etc/kibana/certs/kibana/ca/ca.key --dns kibana.com --pem
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'cert' mode generates X.509 certificate and private keys.
    * By default, this generates a single certificate and key for use
       on a single instance.
    * The '-multiple' option will prompt you to enter details for multiple
       instances and will generate a certificate and key for each one
    * The '-in' option allows for the certificate generation to be automated by describing
       the details of each instance in a YAML file

    * An instance is any piece of the Elastic Stack that requires an SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.


    * All certificates generated by this tool will be signed by a certificate authority (CA)
      unless the --self-signed command line option is specified.
      The tool can automatically generate a new CA for you, or you can provide your own with
      the --ca or --ca-cert command line options.


By default the 'cert' mode produces a single PKCS#12 output file which holds:
    * The instance certificate
    * The private key for the instance certificate
    * The CA certificate

If you specify any of the following options:
    * -pem (PEM formatted output)
    * -multiple (generate multiple certificates)
    * -in (generate certificates from an input file)
then the output will be be a zip file containing individual certificate/key files


Certificates written to /etc/kibana/certs/kibana/certificate.zip

This file should be properly secured as it contains the private key for
your instance.
After unzipping the file, there will be a directory for each instance.
Each instance has a certificate and private key.
For each Elastic product that you wish to configure, you should copy
the certificate, key, and CA certificate to the relevant configuration directory
and then follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.
root@kibana:/etc/kibana/certs/kibana#

root@kibana:/etc/kibana/certs/kibana# ls
ca  ca_kibana.zip  certificate.zip
root@kibana:/etc/kibana/certs/kibana# unzip certificate.zip
Archive:  certificate.zip
   creating: elastic/
  inflating: elastic/elastic.crt
  inflating: elastic/elastic.key
root@kibana:/etc/kibana/certs/kibana#

# change the name
ca  ca_kibana.zip  certificate.zip  elastic
root@kibana:/etc/kibana/certs/kibana# mv elastic kibana
root@kibana:/etc/kibana/certs/kibana# ls
ca  ca_kibana.zip  certificate.zip  kibana
root@kibana:/etc/kibana/certs/kibana#
root@kibana:/etc/kibana/certs/kibana# cd kibana/
root@kibana:/etc/kibana/certs/kibana/kibana# mv elastic.crt kibana.crt
root@kibana:/etc/kibana/certs/kibana/kibana# ls
elastic.key  kibana.crt
root@kibana:/etc/kibana/certs/kibana/kibana# mv elastic.key kibana.key
root@kibana:/etc/kibana/certs/kibana/kibana# ls
kibana.crt  kibana.key
root@kibana:/etc/kibana/certs/kibana/kibana#

# list of files that should be in your /etc/kibana/certs directory

root@matrix:/etc/kibana/certs/kibana# ls -Rl
.:
total 16
drwxr-sr-x 2 root kibana 4096 Apr 18 11:07 ca
-rw------- 1 root kibana 2516 Apr 18 11:07 ca_kibana.zip
-rw------- 1 root kibana 2558 Apr 18 11:11 certificate.zip
drwxr-sr-x 2 root kibana 4096 Apr 18 11:11 kibana

./ca:
total 8
-rw-r--r-- 1 root kibana 1200 Apr 18 11:07 ca.crt
-rw-r--r-- 1 root kibana 1675 Apr 18 11:07 ca.key

./kibana:
total 8
-rw-r--r-- 1 root kibana 1176 Apr 18 11:11 kibana.crt
-rw-r--r-- 1 root kibana 1679 Apr 18 11:11 kibana.key
root@matrix:/etc/kibana/certs/kibana#

### file paths that we need to add in the kibana.yml ssl
/etc/kibana/certs/kibana/kibana/kibana.crt
/etc/kibana/certs/kibana/kibana/kibana.key
