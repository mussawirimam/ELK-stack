### official documentation for setting up the ssl
https://www.elastic.co/blog/configuring-ssl-tls-and-https-to-secure-elasticsearch-kibana-beats-and-logstash
### continuing on kibana: how ssl gets created and we assign it to the elastic and those configuration to kibana
### and generating ssl for kibana. Right now we dont have domain name for the kibana, because we dont have the certificate for this particular kibana service, and that is why we are using kibana on http.
# side note: first spin up elasticsearch, and then kibana. 

#first step is to generate ca, then you generate certificates using ca
# we learned the connection of elasticsearch to the kibana and the ssl binding to the kibana reaching to the elasticsearch self signed certificate and we are doing the practice stand alone cluster; not with multipe elasticsearch. 
# how ssl gets created and how we assign it to the elastic.
# we are going to add domain name and configure the certificates with kibana. 

###################### KIBANA SSL/TLS CERTIFICATE GENERATION AND CONFIGURATION ######################
# when we install kibana, we get binaries with the kibana as well
root@kibana:~# cd /usr/share/kibana/bin/
root@kibana:/usr/share/kibana/bin# ls
kibana  kibana-encryption-keys  kibana-health-gateway  kibana-keystore  kibana-plugin  kibana-setup  kibana-verification-code
root@kibana:/usr/share/kibana/bin#

### we will go with the elasticsearch bin to generate the certificates and keys
root@kibana:/usr/share/kibana/bin# cd /usr/share/elasticsearch/bin/
root@kibana:/usr/share/elasticsearch/bin# ls
elasticsearch                          elasticsearch-env            elasticsearch-reconfigure-node  elasticsearch-sql-cli
elasticsearch-certgen                  elasticsearch-env-from-file  elasticsearch-reset-password    elasticsearch-sql-cli-8.14.1.jar
elasticsearch-certutil                 elasticsearch-geoip          elasticsearch-saml-metadata     elasticsearch-syskeygen
elasticsearch-cli                      elasticsearch-keystore       elasticsearch-service-tokens    elasticsearch-users
elasticsearch-create-enrollment-token  elasticsearch-node           elasticsearch-setup-passwords   systemd-entrypoint
elasticsearch-croneval                 elasticsearch-plugin         elasticsearch-shard
root@kibana:/usr/share/elasticsearch/bin#

root@matrix:/usr/share/elasticsearch/bin# ls /etc/kibana/certs/
ca  elastic
root@matrix:/usr/share/elasticsearch/bin#

### we will use the same commands as to how we created certificate and key for the elasticsearch and we will modify the command to use it with kibana
# if the kibana directory is not there then we have to create it
# /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/kibana/certs/kibana/ca_kibana.zip

root@kibana:/usr/share/elasticsearch/bin# ls /etc/kibana/certs/
ca  elastic
root@kibana:/usr/share/elasticsearch/bin#
root@kibana:/etc/kibana/certs# cd /etc/kibana/certs/
root@kibana:/etc/kibana/certs# mkdir kibana
root@kibana:/etc/kibana/certs# ls
ca  elastic  kibana
root@kibana:/etc/kibana/certs#

=== generating ca certificates ===
### we will create our ca using the elasticsearch-certutil
root@kibana:/usr/share/elasticsearch/bin# /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pem --out /etc/kibana/certs/kibana/ca_kibana.zip
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'ca' mode generates a new 'certificate authority'
This will create a new X.509 certificate and private key that can be used
to sign certificate when running in 'cert' mode.

Use the 'ca-dn' option if you wish to configure the 'distinguished name'
of the certificate authority

By default the 'ca' mode produces a single PKCS#12 output file which holds:
    * The CA certificate
    * The CA's private key

If you elect to generate PEM format certificates (the -pem option), then the output will
be a zip file containing individual files for the CA certificate and private key

root@kibana:/usr/share/elasticsearch/bin#

root@kibana:/usr/share/elasticsearch/bin# cd /etc/kibana/certs/kibana/
root@kibana:/etc/kibana/certs/kibana# ls
ca_kibana.zip
root@kibana:/etc/kibana/certs/kibana#

### unzip the ca_kibana to get the ca
root@kibana:/etc/kibana/certs/kibana# unzip ca_kibana.zip
Archive:  ca_kibana.zip
   creating: ca/
  inflating: ca/ca.crt
  inflating: ca/ca.key
root@kibana:/etc/kibana/certs/kibana# ls
ca  ca_kibana.zip
root@kibana:/etc/kibana/certs/kibana#

root@kibana:/etc/kibana/certs/kibana# ls ca
ca.crt  ca.key
root@kibana:/etc/kibana/certs/kibana#

=== generating ca.crt and ca.key to create our certificates  ===
### and we will require the ca.crt and ca.key to generate our certificates using our ca
# to generate certificate and we provided the path and name of the certificate
### change the name to kibana ### small mistake I made   <------------------------------------------------------
#/usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/kibana/certs/kibana/certificate.zip --name elastic --ca-cert /etc/kibana/certs/kibana/ca/ca.crt --ca-key /etc/kibana/certs/kibana/ca/ca.key --dns kibana.com –-pem

### I made a mistake here, instead of elastic --name should be kibana but I have changed the name of the file in below section but you can directly just change the --name kibana instead of elastic
root@kibana:/etc/kibana/certs/kibana# /usr/share/elasticsearch/bin/elasticsearch-certutil cert --out /etc/kibana/certs/kibana/certificate.zip --name elastic --ca-cert /etc/kibana/certs/kibana/ca/ca.crt --ca-key /etc/kibana/certs/kibana/ca/ca.key --dns kibana.com --pem
This tool assists you in the generation of X.509 certificates and certificate
signing requests for use with SSL/TLS in the Elastic stack.

The 'cert' mode generates X.509 certificate and private keys.
    * By default, this generates a single certificate and key for use
       on a single instance.
    * The '-multiple' option will prompt you to enter details for multiple
       instances and will generate a certificate and key for each one
    * The '-in' option allows for the certificate generation to be automated by describing
       the details of each instance in a YAML file

    * An instance is any piece of the Elastic Stack that requires an SSL certificate.
      Depending on your configuration, Elasticsearch, Logstash, Kibana, and Beats
      may all require a certificate and private key.
    * The minimum required value for each instance is a name. This can simply be the
      hostname, which will be used as the Common Name of the certificate. A full
      distinguished name may also be used.
    * A filename value may be required for each instance. This is necessary when the
      name would result in an invalid file or directory name. The name provided here
      is used as the directory name (within the zip) and the prefix for the key and
      certificate files. The filename is required if you are prompted and the name
      is not displayed in the prompt.
    * IP addresses and DNS names are optional. Multiple values can be specified as a
      comma separated string. If no IP addresses or DNS names are provided, you may
      disable hostname verification in your SSL configuration.


    * All certificates generated by this tool will be signed by a certificate authority (CA)
      unless the --self-signed command line option is specified.
      The tool can automatically generate a new CA for you, or you can provide your own with
      the --ca or --ca-cert command line options.


By default the 'cert' mode produces a single PKCS#12 output file which holds:
    * The instance certificate
    * The private key for the instance certificate
    * The CA certificate

If you specify any of the following options:
    * -pem (PEM formatted output)
    * -multiple (generate multiple certificates)
    * -in (generate certificates from an input file)
then the output will be be a zip file containing individual certificate/key files


Certificates written to /etc/kibana/certs/kibana/certificate.zip

This file should be properly secured as it contains the private key for
your instance.
After unzipping the file, there will be a directory for each instance.
Each instance has a certificate and private key.
For each Elastic product that you wish to configure, you should copy
the certificate, key, and CA certificate to the relevant configuration directory
and then follow the SSL configuration instructions in the product guide.

For client applications, you may only need to copy the CA certificate and
configure the client to trust this certificate.
root@kibana:/etc/kibana/certs/kibana#

root@kibana:/etc/kibana/certs/kibana# ls
ca  ca_kibana.zip  certificate.zip
root@kibana:/etc/kibana/certs/kibana# unzip certificate.zip
Archive:  certificate.zip
   creating: elastic/
  inflating: elastic/elastic.crt
  inflating: elastic/elastic.key
root@kibana:/etc/kibana/certs/kibana#

# change the name
ca  ca_kibana.zip  certificate.zip  elastic
root@kibana:/etc/kibana/certs/kibana# mv elastic kibana
root@kibana:/etc/kibana/certs/kibana# ls
ca  ca_kibana.zip  certificate.zip  kibana
root@kibana:/etc/kibana/certs/kibana#
root@kibana:/etc/kibana/certs/kibana# cd kibana/
root@kibana:/etc/kibana/certs/kibana/kibana# mv elastic.crt kibana.crt
root@kibana:/etc/kibana/certs/kibana/kibana# ls
elastic.key  kibana.crt
root@kibana:/etc/kibana/certs/kibana/kibana# mv elastic.key kibana.key
root@kibana:/etc/kibana/certs/kibana/kibana# ls
kibana.crt  kibana.key
root@kibana:/etc/kibana/certs/kibana/kibana#

# list of files that should be in your /etc/kibana/certs directory

root@matrix:/etc/kibana/certs/kibana# ls -Rl
.:
total 16
drwxr-sr-x 2 root kibana 4096 Apr 18 11:07 ca
-rw------- 1 root kibana 2516 Apr 18 11:07 ca_kibana.zip
-rw------- 1 root kibana 2558 Apr 18 11:11 certificate.zip
drwxr-sr-x 2 root kibana 4096 Apr 18 11:11 kibana

./ca:
total 8
-rw-r--r-- 1 root kibana 1200 Apr 18 11:07 ca.crt
-rw-r--r-- 1 root kibana 1675 Apr 18 11:07 ca.key

./kibana:
total 8
-rw-r--r-- 1 root kibana 1176 Apr 18 11:11 kibana.crt
-rw-r--r-- 1 root kibana 1679 Apr 18 11:11 kibana.key
root@matrix:/etc/kibana/certs/kibana#

### file paths that we need to add in the kibana.yml ssl
/etc/kibana/certs/kibana/kibana/kibana.crt
/etc/kibana/certs/kibana/kibana/kibana.key

==================== ADDING CERTIFICATES IN KIBANA.YML FILE ====================
### add the certificate and ca in kibana.yml file 

root@matrix:/etc/kibana/certs/kibana/kibana# cat /etc/kibana/kibana.yml
# For more configuration options see the configuration guide for Kibana in
# https://www.elastic.co/guide/index.html

# =================== System: Kibana Server ===================
# Kibana is served by a back end server. This setting specifies the port to use.
server.port: 5601

# Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.
# The default is 'localhost', which usually means remote machines will not be able to connect.
# To allow connections from remote users, set this parameter to a non-loopback address.
server.host: "0.0.0.0"

# Enables you to specify a path to mount Kibana at if you are running behind a proxy.
# Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath
# from requests it receives, and to prevent a deprecation warning at startup.
# This setting cannot end in a slash.
#server.basePath: ""

# Specifies whether Kibana should rewrite requests that are prefixed with
# `server.basePath` or require that they are rewritten by your reverse proxy.
# Defaults to `false`.
#server.rewriteBasePath: false

# Specifies the public URL at which Kibana is available for end users. If
# `server.basePath` is configured this URL should end with the same basePath.
server.publicBaseUrl: "https://kibana.com:5601"                        <---------------------------------------   host name needs to be changed from hostname to domainname

# The maximum payload size in bytes for incoming server requests.
#server.maxPayload: 1048576

# The Kibana server's name. This is used for display purposes.
#server.name: "your-hostname"

# =================== System: Kibana Server (Optional) ===================
# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.
# These settings enable SSL for outgoing requests from the Kibana server to the browser.
server.ssl.enabled: true                                                      <-----------------------------------------------------
server.ssl.certificate: /etc/kibana/certs/kibana/kibana/kibana.crt            <-----------------------------------------------------
server.ssl.key: /etc/kibana/certs/kibana/kibana/kibana.key                    <-----------------------------------------------------
elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/certs/ca/ca.crt" ]   <----------------------------------------------------- # I made mistake here (look into troubleshooting section below

# =================== System: Elasticsearch ===================
# The URLs of the Elasticsearch instances to use for all your queries.
#elasticsearch.hosts: ["http://localhost:9200"]
elasticsearch.hosts: ["https://sys.fcc:9200"]
#elasticsearch.hosts: ["https://172.17.154.9:9200"]

# If your Elasticsearch is protected with basic authentication, these settings provide
# the username and password that the Kibana server uses to perform maintenance on the Kibana
# index at startup. Your Kibana users still need to authenticate with Elasticsearch, which
# is proxied through the Kibana server.
elasticsearch.username: "kibana_system"
elasticsearch.password: "123456789"

# Kibana can also authenticate to Elasticsearch via "service account tokens".
# Service account tokens are Bearer style tokens that replace the traditional username/password based configuration.
# Use this token instead of a username/password.
# elasticsearch.serviceAccountToken: "my_token"

# Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of
# the elasticsearch.requestTimeout setting.
#elasticsearch.pingTimeout: 1500

# Time in milliseconds to wait for responses from the back end or Elasticsearch. This value
# must be a positive integer.
#elasticsearch.requestTimeout: 30000

# The maximum number of sockets that can be used for communications with elasticsearch.
# Defaults to `Infinity`.
#elasticsearch.maxSockets: 1024

# Specifies whether Kibana should use compression for communications with elasticsearch
# Defaults to `false`.
#elasticsearch.compression: false

# List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side
# headers, set this value to [] (an empty list).
#elasticsearch.requestHeadersWhitelist: [ authorization ]

# Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten
# by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.
#elasticsearch.customHeaders: {}

# Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.
#elasticsearch.shardTimeout: 30000

# =================== System: Elasticsearch (Optional) ===================
# These files are used to verify the identity of Kibana to Elasticsearch and are required when
# xpack.security.http.ssl.client_authentication in Elasticsearch is set to required.
#elasticsearch.ssl.certificate: /path/to/your/client.crt
#elasticsearch.ssl.key: /path/to/your/client.key

elasticsearch.ssl.certificate: /etc/kibana/certs/elastic/elastic.crt
elasticsearch.ssl.key: /etc/kibana/certs/elastic/elastic.key

# Enables you to specify a path to the PEM file for the certificate
# authority for your Elasticsearch instance.
#elasticsearch.ssl.certificateAuthorities: [ "/path/to/your/CA.pem" ]
elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/certs/ca/ca.crt" ]
# To disregard the validity of SSL certificates, change this setting's value to 'none'.
#elasticsearch.ssl.verificationMode: full

# =================== System: Logging ===================
# Set the value of this setting to off to suppress all logging output, or to debug to log everything. Defaults to 'info'
#logging.root.level: debug

# Enables you to specify a file where Kibana stores log output.
logging:
  appenders:
    file:
      type: file
      fileName: /var/log/kibana/kibana.log
      layout:
        type: json
  root:
    appenders:
      - default
      - file
#  policy:
#    type: size-limit
#    size: 256mb
#  strategy:
#    type: numeric
#    max: 10
#  layout:
#    type: json

# Logs queries sent to Elasticsearch.
#logging.loggers:
#  - name: elasticsearch.query
#    level: debug

# Logs http responses.
#logging.loggers:
#  - name: http.server.response
#    level: debug

# Logs system usage information.
#logging.loggers:
#  - name: metrics.ops
#    level: debug

# Enables debug logging on the browser (dev console)
#logging.browser.root:
#  level: debug

# =================== System: Other ===================
# The path where Kibana stores persistent data not saved in Elasticsearch. Defaults to data
#path.data: data

# Specifies the path where Kibana creates the process ID file.
pid.file: /run/kibana/kibana.pid

# Set the interval in milliseconds to sample system and process performance
# metrics. Minimum is 100ms. Defaults to 5000ms.
#ops.interval: 5000

# Specifies locale to be used for all localizable strings, dates and number formats.
# Supported languages are the following: English (default) "en", Chinese "zh-CN", Japanese "ja-JP", French "fr-FR".
#i18n.locale: "en"

# =================== Frequently used (Optional)===================

# =================== Saved Objects: Migrations ===================
# Saved object migrations run at startup. If you run into migration-related issues, you might need to adjust these settings.

# The number of documents migrated at a time.
# If Kibana can't start up or upgrade due to an Elasticsearch `circuit_breaking_exception`,
# use a smaller batchSize value to reduce the memory pressure. Defaults to 1000 objects per batch.
#migrations.batchSize: 1000

# The maximum payload size for indexing batches of upgraded saved objects.
# To avoid migrations failing due to a 413 Request Entity Too Large response from Elasticsearch.
# This value should be lower than or equal to your Elasticsearch cluster’s `http.max_content_length`
# configuration option. Default: 100mb
#migrations.maxBatchSizeBytes: 100mb

# The number of times to retry temporary migration failures. Increase the setting
# if migrations fail frequently with a message such as `Unable to complete the [...] step after
# 15 attempts, terminating`. Defaults to 15
#migrations.retryAttempts: 15

# =================== Search Autocomplete ===================
# Time in milliseconds to wait for autocomplete suggestions from Elasticsearch.
# This value must be a whole number greater than zero. Defaults to 1000ms
#unifiedSearch.autocomplete.valueSuggestions.timeout: 1000

# Maximum number of documents loaded by each shard to generate autocomplete suggestions.
# This value must be a whole number greater than zero. Defaults to 100_000
#unifiedSearch.autocomplete.valueSuggestions.terminateAfter: 100000
root@matrix:/etc/kibana/certs/kibana/kibana#

### give permissions chmod and chown
root@matrix:/etc/kibana/certs/kibana# ll
total 24
drwxr-sr-x 4 root kibana 4096 Apr 18 11:11 ./
drwxr-sr-x 5 root kibana 4096 Apr 18 11:06 ../
drwxr-sr-x 2 root kibana 4096 Apr 18 11:07 ca/
-rw------- 1 root kibana 2516 Apr 18 11:07 ca_kibana.zip
-rw------- 1 root kibana 2558 Apr 18 11:11 certificate.zip
drwxr-sr-x 2 root kibana 4096 Apr 18 11:11 kibana/
root@matrix:/etc/kibana/certs/kibana#

root@matrix:/etc/kibana# chown -R kibana:kibana certs
root@matrix:/etc/kibana# chmod -R 775 certs
root@matrix:/etc/kibana# ll
total 32
drwxr-s---  3 root   kibana 4096 Apr 18 21:05 ./
drwxr-xr-x 85 root   root   4096 Apr 18 15:58 ../
drwxrwsr-x  5 kibana kibana 4096 Apr 18 11:06 certs/
-rw-rw----  1 root   kibana  130 Apr 17 14:31 kibana.keystore
-rw-rw----  1 root   kibana 8254 Apr 18 21:05 kibana.yml
-rw-rw-r--  1 root   kibana  447 Jun 10  2024 node.options
root@matrix:/etc/kibana#

=============== IMPORTANT STEP =================
### give the entry in /etc/hosts for domain

root@matrix:/etc/kibana# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.154.9  netmask 255.255.240.0  broadcast 172.17.159.255
        inet6 fe80::215:5dff:fee0:fbed  prefixlen 64  scopeid 0x20<link>
        ether 00:15:5d:e0:fb:ed  txqueuelen 1000  (Ethernet)
        RX packets 16975  bytes 8771885 (8.7 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 11882  bytes 15571576 (15.5 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 713476  bytes 459543529 (459.5 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 713476  bytes 459543529 (459.5 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@matrix:/etc/kibana#
root@matrix:/etc/kibana# cat /etc/hosts
# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
# [network]
# generateHosts = false
127.0.0.1       localhost
127.0.1.1       matrix. matrix

localhost       sys.fcc
127.0.0.1       sys.fcc
172.17.154.9    sys.fcc
172.17.154.9    kibana.com



# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
root@matrix:/etc/kibana#

### lets start our kibana
root@matrix:/etc/kibana# systemctl stop kibana.service
root@matrix:/etc/kibana# systemctl start kibana.service
root@matrix:/etc/kibana#

### FAILED 
root@matrix:/etc/kibana# systemctl status kibana.service
× kibana.service - Kibana
     Loaded: loaded (/lib/systemd/system/kibana.service; enabled; vendor preset: enabled)
     Active: failed (Result: exit-code) since Fri 2025-04-18 21:12:07 EDT; 9s ago
       Docs: https://www.elastic.co
    Process: 4530 ExecStart=/usr/share/kibana/bin/kibana (code=exited, status=1/FAILURE)
   Main PID: 4530 (code=exited, status=1/FAILURE)

Apr 18 21:12:07 matrix systemd[1]: kibana.service: Scheduled restart job, restart counter is at 3.
Apr 18 21:12:07 matrix systemd[1]: Stopped Kibana.
Apr 18 21:12:07 matrix systemd[1]: kibana.service: Start request repeated too quickly.
Apr 18 21:12:07 matrix systemd[1]: kibana.service: Failed with result 'exit-code'.
Apr 18 21:12:07 matrix systemd[1]: Failed to start Kibana.
root@matrix:/etc/kibana#

######################## TROUBLESHOOTING   ########################
root@matrix:/etc/kibana# sudo -u kibana /usr/share/kibana/bin/kibana --config /etc/kibana/kibana.yml
...
":"server_url"},"transactionSampleRate":{"source":"start","value":0.1,"commonName":"transaction_sample_rate"},"captureSpanStackTraces":{"source":"start","sourceValue":false},"secretToken":{"source":"start","value":"[REDACTED]","commonName":"secret_token"},"serviceName":{"source":"start","value":"kibana","commonName":"service_name"},"serviceVersion":{"source":"start","value":"8.14.1","commonName":"service_version"}},"activationMethod":"require","message":"Elastic APM Node.js Agent v4.5.0"}
Kibana should not be run as root.  Use --allow-root to continue.
root@matrix:/etc/kibana# sudo -u kibana /usr/share/kibana/bin/kibana --config /etc/kibana/kibana.yml
{"log.level":"info","@timestamp":"2025-04-19T01:23:54.620Z","log.logger":"elastic-apm-node","ecs.version":"8.10.0","agentVersion":"4.5.0","env":{"pid":4940,"proctitle":"/usr/share/kibana/bin/../node/bin/node","os":"linux 5.15.167.4-microsoft-standard-WSL2","arch":"x64","host":"matrix","timezone":"UTC-0400","runtime":"Node.js v20.13.1"},"config":{"active":{"source":"start","value":true},"breakdownMetrics":{"source":"start","value":false},"captureBody":{"source":"start","value":"off","commonName":"capture_body"},"captureHeaders":{"source":"start","value":false},"centralConfig":{"source":"start","value":false},"contextPropagationOnly":{"source":"start","value":true},"environment":{"source":"start","value":"production"},"globalLabels":{"source":"start","value":[["kibana_uuid","a7f0fb43-1c1d-435f-8228-caa14549274d"],["git_rev","afbd904e868f2a48a2bbeb8ff20baee8d4aeb468"]],"sourceValue":{"kibana_uuid":"a7f0fb43-1c1d-435f-8228-caa14549274d","git_rev":"afbd904e868f2a48a2bbeb8ff20baee8d4aeb468"}},"logLevel":{"source":"default","value":"info","commonName":"log_level"},"metricsInterval":{"source":"start","value":120,"sourceValue":"120s"},"serverUrl":{"source":"start","value":"https://kibana-cloud-apm.apm.us-east-1.aws.found.io/","commonName":"server_url"},"transactionSampleRate":{"source":"start","value":0.1,"commonName":"transaction_sample_rate"},"captureSpanStackTraces":{"source":"start","sourceValue":false},"secretToken":{"source":"start","value":"[REDACTED]","commonName":"secret_token"},"serviceName":{"source":"start","value":"kibana","commonName":"service_name"},"serviceVersion":{"source":"start","value":"8.14.1","commonName":"service_version"}},"activationMethod":"require","message":"Elastic APM Node.js Agent v4.5.0"}
FATAL CLI ERROR YAMLException: duplicated mapping key at line 99, column 1:
    elasticsearch.ssl.certificateAut ...
    ^
    at generateError (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:167:10)
    at throwError (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:173:9)
    at storeMappingPair (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:335:7)
    at readBlockMapping (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:1098:9)
    at composeNode (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:1359:12)
    at readDocument (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:1525:3)
    at loadDocuments (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:1588:5)
    at load (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:1614:19)
    at safeLoad (/usr/share/kibana/node_modules/js-yaml/lib/js-yaml/loader.js:1637:10)
    at readYaml (/usr/share/kibana/node_modules/@kbn/config/src/raw/read_config.js:21:47)
    at getConfigFromFiles (/usr/share/kibana/node_modules/@kbn/config/src/raw/read_config.js:75:18)
    at getServerlessModeFromCfg (/usr/share/kibana/src/cli/serve/compile_config_stack.js:70:49)
    at compileConfigStack (/usr/share/kibana/src/cli/serve/compile_config_stack.js:53:64)
    at Command.<anonymous> (/usr/share/kibana/src/cli/serve/serve.js:203:66)
    at Command.<anonymous> (/usr/share/kibana/src/cli/command.js:91:20)
    at Command.listener (/usr/share/kibana/node_modules/commander/index.js:370:29)
    at Command.emit (node:events:519:28)
    at Command.parseArgs (/usr/share/kibana/node_modules/commander/index.js:892:12)
    at Command.parse (/usr/share/kibana/node_modules/commander/index.js:642:21)
    at Object.<anonymous> (/usr/share/kibana/src/cli/cli.js:46:9)
    at Module._compile (node:internal/modules/cjs/loader:1358:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1416:10)
    at Module.load (node:internal/modules/cjs/loader:1208:32)
    at Function.Module._load (node:internal/modules/cjs/loader:1024:12)
    at Module.require (node:internal/modules/cjs/loader:1233:19)
    at Module.Hook._require.Module.require (/usr/share/kibana/node_modules/require-in-the-middle/index.js:188:39)
    at Module.Hook._require.Module.require (/usr/share/kibana/node_modules/require-in-the-middle/index.js:188:39)
    at require (node:internal/modules/helpers:179:18)
    at Object.<anonymous> (/usr/share/kibana/src/cli/dist.js:15:1)
    at Module._compile (node:internal/modules/cjs/loader:1358:14)
    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1416:10)
    at Module.load (node:internal/modules/cjs/loader:1208:32)
    at Function.Module._load (node:internal/modules/cjs/loader:1024:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)
    at node:internal/main/run_main_module:28:49
root@matrix:/etc/kibana#

##################### RESOLVED ######################
# =================== System: Kibana Server (Optional) ===================
# Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.
# These settings enable SSL for outgoing requests from the Kibana server to the browser.
server.ssl.enabled: true
server.ssl.certificate: /etc/kibana/certs/kibana/kibana/kibana.crt
server.ssl.key: /etc/kibana/certs/kibana/kibana/kibana.key
server.ssl.certificateAuthorities: [ "/etc/kibana/certs/kibana/ca/ca.crt" ]   <------------------------------------ this was the issue

root@matrix:/etc/kibana# systemctl start kibana

root@matrix:/etc/kibana# systemctl status kibana.service
● kibana.service - Kibana
     Loaded: loaded (/lib/systemd/system/kibana.service; enabled; vendor preset: enabled)
     Active: active (running) since Fri 2025-04-18 21:30:09 EDT; 5s ago
       Docs: https://www.elastic.co
   Main PID: 5061 (node)
      Tasks: 11 (limit: 9359)
     Memory: 339.6M
     CGroup: /system.slice/kibana.service
             └─5061 /usr/share/kibana/bin/../node/bin/node /usr/share/kibana/bin/../src/cli/dist

Apr 18 21:30:09 matrix systemd[1]: Started Kibana.
Apr 18 21:30:09 matrix kibana[5061]: Kibana is currently running with legacy OpenSSL providers enabled! For details and instructions on how to disable see >
Apr 18 21:30:09 matrix kibana[5061]: {"log.level":"info","@timestamp":"2025-04-19T01:30:09.744Z","log.logger":"elastic-apm-node","ecs.version":"8.10.0","ag>
Apr 18 21:30:09 matrix kibana[5061]: Native global console methods have been overridden in production environment.
Apr 18 21:30:10 matrix kibana[5061]: [2025-04-18T21:30:10.898-04:00][INFO ][root] Kibana is starting
Apr 18 21:30:10 matrix kibana[5061]: [2025-04-18T21:30:10.949-04:00][INFO ][node] Kibana process configured with roles: [background_tasks, ui]
lines 1-16/16 (END)

####################### TROUBLE SHOOTING ENDS ##########################
